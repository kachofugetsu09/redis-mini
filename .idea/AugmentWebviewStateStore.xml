<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiIzZjJkOTBjNS1lYTQ3LTRmMjktYTY0NC0zMjUzYjFiMmE1NGEiLCJjb252ZXJzYXRpb25zIjp7IjU1YTAzZTY4LTkzZjYtNDJhYi1hNjk1LTJlYjYxNzNiYmYxYiI6eyJpZCI6IjU1YTAzZTY4LTkzZjYtNDJhYi1hNjk1LTJlYjYxNzNiYmYxYiIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDUtMDhUMTM6NDQ6MDkuNTkzWiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA1LTA4VDEzOjQ0OjE1LjM3MVoiLCJjaGF0SGlzdG9yeSI6W3sic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJmMTc4Nzc0Yy03OTRiLTRmYTEtOTA0Ny05MmY1NWQyNDVlYmUiLCJyZXF1ZXN0X21lc3NhZ2UiOiJFeGNlcHRpb24gaW4gdGhyZWFkIFwibWFpblwiIGphdmEubGFuZy5JbGxlZ2FsU3RhdGVFeGNlcHRpb246IGdyb3VwIG5vdCBzZXRcclxuXHRhdCBpby5uZXR0eS5ib290c3RyYXAuQWJzdHJhY3RCb290c3RyYXAudmFsaWRhdGUoQWJzdHJhY3RCb290c3RyYXAuamF2YToyMDUpXHJcblx0YXQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcC52YWxpZGF0ZShTZXJ2ZXJCb290c3RyYXAuamF2YToxNjcpXHJcblx0YXQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcC52YWxpZGF0ZShTZXJ2ZXJCb290c3RyYXAuamF2YTo0NSlcclxuXHRhdCBpby5uZXR0eS5ib290c3RyYXAuQWJzdHJhY3RCb290c3RyYXAuYmluZChBYnN0cmFjdEJvb3RzdHJhcC5qYXZhOjI2NylcclxuXHRhdCBpby5uZXR0eS5ib290c3RyYXAuQWJzdHJhY3RCb290c3RyYXAuYmluZChBYnN0cmFjdEJvb3RzdHJhcC5qYXZhOjI1MylcclxuXHRhdCBzaXRlLmhuZnkyNTguc2VydmVyLm1pbmlSZWRpc1NlcnZlci5zdGFydChtaW5pUmVkaXNTZXJ2ZXIuamF2YTozNSlcclxuXHRhdCBzaXRlLmhuZnkyNTgubGF1bmNoZXIuUmVkaXNTZXJ2ZXJMYXVuY2hlci5tYWluKFJlZGlzU2VydmVyTGF1bmNoZXIuamF2YTo5KVxyXG7lt7LkuI7lnLDlnYDkuLogJycxMjcuMC4wLjE6NTA2NjEn77yM5Lyg6L6TOiAn5aWX5o6l5a2XJycg55qE55uu5qCH6Jma5ouf5py65pat5byA6L+e5o6l6L+Z6YeM5ZOq6YeM5pyJ6Zeu6aKY5LqG5ZGiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkV4Y2VwdGlvbiBpbiB0aHJlYWQgXCJtYWluXCIgamF2YS5sYW5nLklsbGVnYWxTdGF0ZUV4Y2VwdGlvbjogZ3JvdXAgbm90IHNldFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGlvLm5ldHR5LmJvb3RzdHJhcC5BYnN0cmFjdEJvb3RzdHJhcC52YWxpZGF0ZShBYnN0cmFjdEJvb3RzdHJhcC5qYXZhOjIwNSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBpby5uZXR0eS5ib290c3RyYXAuU2VydmVyQm9vdHN0cmFwLnZhbGlkYXRlKFNlcnZlckJvb3RzdHJhcC5qYXZhOjE2NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBpby5uZXR0eS5ib290c3RyYXAuU2VydmVyQm9vdHN0cmFwLnZhbGlkYXRlKFNlcnZlckJvb3RzdHJhcC5qYXZhOjQ1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGlvLm5ldHR5LmJvb3RzdHJhcC5BYnN0cmFjdEJvb3RzdHJhcC5iaW5kKEFic3RyYWN0Qm9vdHN0cmFwLmphdmE6MjY3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGlvLm5ldHR5LmJvb3RzdHJhcC5BYnN0cmFjdEJvb3RzdHJhcC5iaW5kKEFic3RyYWN0Qm9vdHN0cmFwLmphdmE6MjUzKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IHNpdGUuaG5meTI1OC5zZXJ2ZXIubWluaVJlZGlzU2VydmVyLnN0YXJ0KG1pbmlSZWRpc1NlcnZlci5qYXZhOjM1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IHNpdGUuaG5meTI1OC5sYXVuY2hlci5SZWRpc1NlcnZlckxhdW5jaGVyLm1haW4oUmVkaXNTZXJ2ZXJMYXVuY2hlci5qYXZhOjkpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IuW3suS4juWcsOWdgOS4uiAnJzEyNy4wLjAuMTo1MDY2MSfvvIzkvKDovpM6ICflpZfmjqXlrZcnJyDnmoTnm67moIfomZrmi5/mnLrmlq3lvIDov57mjqXov5nph4zlk6rph4zmnInpl67popjkuoblkaIifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlRoZSBlcnJvciBpcyBvY2N1cnJpbmcgYmVjYXVzZSB5b3UncmUgY2FsbGluZyBgYmluZCgpYCBiZWZvcmUgc2V0dGluZyB0aGUgZ3JvdXAgaW4geW91ciBgbWluaVJlZGlzU2VydmVyLnN0YXJ0KClgIG1ldGhvZC4gWW91IG5lZWQgdG8gcmVhcnJhbmdlIHRoZSBvcmRlciBvZiBvcGVyYXRpb25zLlxuXG48YXVnbWVudF9jb2RlX3NuaXBwZXQgcGF0aD1cInNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YVwiIG1vZGU9XCJFRElUXCI+XG5gYGBqYXZhXG5AT3ZlcnJpZGVcbnB1YmxpYyB2b2lkIHN0YXJ0KCkge1xuICAgIFNlcnZlckJvb3RzdHJhcCBzZXJ2ZXJCb290c3RyYXAgPSBuZXcgU2VydmVyQm9vdHN0cmFwKCk7XG4gICAgc2VydmVyQm9vdHN0cmFwLmdyb3VwKGJvc3NHcm91cCwgd29ya2VyR3JvdXApXG4gICAgICAgICAgICAuY2hhbm5lbChOaW9TZXJ2ZXJTb2NrZXRDaGFubmVsLmNsYXNzKVxuICAgICAgICAgICAgLmNoaWxkSGFuZGxlcihuZXcgQ2hhbm5lbEluaXRpYWxpemVyPFNvY2tldENoYW5uZWw+KCkge1xuICAgICAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGluaXRDaGFubmVsKFNvY2tldENoYW5uZWwgY2gpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICBDaGFubmVsUGlwZWxpbmUgcGlwZWxpbmUgPSBjaC5waXBlbGluZSgpO1xuICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdEZWNvZGVyKCkpO1xuICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdIYW5kbGVyKCkpO1xuICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdFbmNvZGVyKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIFxuICAgIC8vIEJpbmQgYWZ0ZXIgY29uZmlndXJpbmcgdGhlIGJvb3RzdHJhcFxuICAgIHRyeSB7XG4gICAgICAgIHNlcnZlckNoYW5uZWwgPSBzZXJ2ZXJCb290c3RyYXAuYmluZChob3N0LCBwb3J0KS5zeW5jKCkuY2hhbm5lbCgpO1xuICAgIH0gY2F0Y2ggKEludGVycnVwdGVkRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oXCJGYWlsZWQgdG8gc3RhcnQgc2VydmVyXCIsIGUpO1xuICAgIH1cbn1cbmBgYFxuPC9hdWdtZW50X2NvZGVfc25pcHBldD5cblxuVGhlIGlzc3VlIGlzIHRoYXQgeW91J3JlIGNhbGxpbmcgYHNlcnZlckJvb3RzdHJhcC5iaW5kKGhvc3QsIHBvcnQpYCBiZWZvcmUgc2V0dGluZyB0aGUgZ3JvdXAgd2l0aCBgc2VydmVyQm9vdHN0cmFwLmdyb3VwKGJvc3NHcm91cCwgd29ya2VyR3JvdXApYC4gSW4gTmV0dHksIHlvdSBuZWVkIHRvIGNvbmZpZ3VyZSB0aGUgYm9vdHN0cmFwIGNvbXBsZXRlbHkgYmVmb3JlIGJpbmRpbmcgaXQgdG8gYSBwb3J0LlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiJzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvbWluaVJlZGlzU2VydmVyLmphdmE6MC01MjFcbnNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YTo1MjEtOTYwXG5zcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvbWluaVJlZGlzU2VydmVyLmphdmE6OTYwLTE1ODdcbnNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9SZWRpc1NlcnZlci5qYXZhOjAtOTBcbnNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L2xhdW5jaGVyL1JlZGlzU2VydmVyTGFuY2hlci5qYXZhOjAtNjhcbnNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L1JlZGlzU2VydmVyLmphdmE6MC05MFxuc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvbGF1bmNoZXIvUmVkaXNTZXJ2ZXJMYXVuY2hlci5qYXZhOjAtNjlcbnBvbS54bWw6MC02NTNcbnNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L1JlZGlzU2VydmljZS5qYXZhOjAtNTdcbnNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9TdHJpbmdIYW5kbGVyLmphdmE6MC02MVxuLmdpdGlnbm9yZTowLTQ5MCJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IkV4Y2VwdGlvbiBpbiB0aHJlYWQgXCJtYWluXCIgamF2YS5sYW5nLklsbGVnYWxTdGF0ZUV4Y2VwdGlvbjogZ3JvdXAgbm90IHNldFxyXG5cdGF0IGlvLm5ldHR5LmJvb3RzdHJhcC5BYnN0cmFjdEJvb3RzdHJhcC52YWxpZGF0ZShBYnN0cmFjdEJvb3RzdHJhcC5qYXZhOjIwNSlcclxuXHRhdCBpby5uZXR0eS5ib290c3RyYXAuU2VydmVyQm9vdHN0cmFwLnZhbGlkYXRlKFNlcnZlckJvb3RzdHJhcC5qYXZhOjE2NylcclxuXHRhdCBpby5uZXR0eS5ib290c3RyYXAuU2VydmVyQm9vdHN0cmFwLnZhbGlkYXRlKFNlcnZlckJvb3RzdHJhcC5qYXZhOjQ1KVxyXG5cdGF0IGlvLm5ldHR5LmJvb3RzdHJhcC5BYnN0cmFjdEJvb3RzdHJhcC5iaW5kKEFic3RyYWN0Qm9vdHN0cmFwLmphdmE6MjY3KVxyXG5cdGF0IGlvLm5ldHR5LmJvb3RzdHJhcC5BYnN0cmFjdEJvb3RzdHJhcC5iaW5kKEFic3RyYWN0Qm9vdHN0cmFwLmphdmE6MjUzKVxyXG5cdGF0IHNpdGUuaG5meTI1OC5zZXJ2ZXIubWluaVJlZGlzU2VydmVyLnN0YXJ0KG1pbmlSZWRpc1NlcnZlci5qYXZhOjM1KVxyXG5cdGF0IHNpdGUuaG5meTI1OC5sYXVuY2hlci5SZWRpc1NlcnZlckxhdW5jaGVyLm1haW4oUmVkaXNTZXJ2ZXJMYXVuY2hlci5qYXZhOjkpXHJcbuW3suS4juWcsOWdgOS4uiAnJzEyNy4wLjAuMTo1MDY2MSfvvIzkvKDovpM6ICflpZfmjqXlrZcnJyDnmoTnm67moIfomZrmi5/mnLrmlq3lvIDov57mjqXov5nph4zlk6rph4zmnInpl67popjkuoblkaIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJGOi9taW5pUmVkaXMiLCJmb2xkZXJSb290IjoiRjovbWluaVJlZGlzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMzo0NDoxNS4zNzZaIiwicmVzcG9uc2VfdGV4dCI6IlRoZSBlcnJvciBpcyBvY2N1cnJpbmcgYmVjYXVzZSB5b3UncmUgY2FsbGluZyBgYmluZCgpYCBiZWZvcmUgc2V0dGluZyB0aGUgZ3JvdXAgaW4geW91ciBgbWluaVJlZGlzU2VydmVyLnN0YXJ0KClgIG1ldGhvZC4gWW91IG5lZWQgdG8gcmVhcnJhbmdlIHRoZSBvcmRlciBvZiBvcGVyYXRpb25zLlxuXG5gYGBgamF2YSBwYXRoPXNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YSBtb2RlPUVESVRcbkBPdmVycmlkZVxucHVibGljIHZvaWQgc3RhcnQoKSB7XG4gICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcbiAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcbiAgICAgICAgICAgIC5jaGFubmVsKE5pb1NlcnZlclNvY2tldENoYW5uZWwuY2xhc3MpXG4gICAgICAgICAgICAuY2hpbGRIYW5kbGVyKG5ldyBDaGFubmVsSW5pdGlhbGl6ZXI8U29ja2V0Q2hhbm5lbD4oKSB7XG4gICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgaW5pdENoYW5uZWwoU29ja2V0Q2hhbm5lbCBjaCkgdGhyb3dzIEV4Y2VwdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgIENoYW5uZWxQaXBlbGluZSBwaXBlbGluZSA9IGNoLnBpcGVsaW5lKCk7XG4gICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0hhbmRsZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0VuY29kZXIoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgLy8gQmluZCBhZnRlciBjb25maWd1cmluZyB0aGUgYm9vdHN0cmFwXG4gICAgdHJ5IHtcbiAgICAgICAgc2VydmVyQ2hhbm5lbCA9IHNlcnZlckJvb3RzdHJhcC5iaW5kKGhvc3QsIHBvcnQpLnN5bmMoKS5jaGFubmVsKCk7XG4gICAgfSBjYXRjaCAoSW50ZXJydXB0ZWRFeGNlcHRpb24gZSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbihcIkZhaWxlZCB0byBzdGFydCBzZXJ2ZXJcIiwgZSk7XG4gICAgfVxufVxuYGBgYFxuXG5UaGUgaXNzdWUgaXMgdGhhdCB5b3UncmUgY2FsbGluZyBgc2VydmVyQm9vdHN0cmFwLmJpbmQoaG9zdCwgcG9ydClgIGJlZm9yZSBzZXR0aW5nIHRoZSBncm91cCB3aXRoIGBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClgLiBJbiBOZXR0eSwgeW91IG5lZWQgdG8gY29uZmlndXJlIHRoZSBib290c3RyYXAgY29tcGxldGVseSBiZWZvcmUgYmluZGluZyBpdCB0byBhIHBvcnQuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOlt7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI1MjEiLCJibG9iX25hbWUiOiI1ZjIzNGJmZmU1MDBlODg2MDcwNTY5MGYyM2QxMmM1MDViNTVlYjNkODcyNDFmN2E3MzM5YmJkM2JlZDU4NzEwIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL21pbmlSZWRpc1NlcnZlci5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjUyMSIsImNoYXJfZW5kIjoiOTYwIiwiYmxvYl9uYW1lIjoiNWYyMzRiZmZlNTAwZTg4NjA3MDU2OTBmMjNkMTJjNTA1YjU1ZWIzZDg3MjQxZjdhNzMzOWJiZDNiZWQ1ODcxMCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YSJ9fSx7ImNoYXJfc3RhcnQiOiI5NjAiLCJjaGFyX2VuZCI6IjE1ODciLCJibG9iX25hbWUiOiI1ZjIzNGJmZmU1MDBlODg2MDcwNTY5MGYyM2QxMmM1MDViNTVlYjNkODcyNDFmN2E3MzM5YmJkM2JlZDU4NzEwIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL21pbmlSZWRpc1NlcnZlci5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjkwIiwiYmxvYl9uYW1lIjoiMGM1MTBmMDdmODQ5NjU5NTUzNGIwNGFkY2U2N2RkZGQ0ZDY5Y2ViNjY0Njk0YzAwODg5YTE4OGFjYjNkNGZmNyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9SZWRpc1NlcnZlci5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjY4IiwiYmxvYl9uYW1lIjoiOWMzN2QzMWRmNzg3YjE0ZDQ4YmI5OGI0ZDEzNWMxMWUwYTFlYjNhNGUxZWVmMmIzYmU5Y2E5OGRlNzIxZTkxYSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L2xhdW5jaGVyL1JlZGlzU2VydmVyTGFuY2hlci5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjkwIiwiYmxvYl9uYW1lIjoiNGYwMjE3MjMwYWRjZDU1ZDEzYTM0NTgwZTdhODNiNTI4OTUxMDEwZjk4ZjRiYWM3NzQwMGY3MzNhMWQxYmRlZSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L1JlZGlzU2VydmVyLmphdmEifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNjkiLCJibG9iX25hbWUiOiIyNWJlNmRmNmI0MTdiMDQ5NmM0OGUzMWE3NzY0OGY2NmU4YTJjNmViZTRlMDRhOGQwYzg2YjlhNTBkZWRiY2E4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvbGF1bmNoZXIvUmVkaXNTZXJ2ZXJMYXVuY2hlci5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjY1MyIsImJsb2JfbmFtZSI6IjAyMzJjYTZjNmY5Mjc2YTc5YTgyY2E4YzdmZmZhNmJiZmFkOGVkMGQ4NzRjNGQ1NjAzMzM5MzdiMTAzN2ZjMTgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJwb20ueG1sIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjU3IiwiYmxvYl9uYW1lIjoiNDA1ZTYyNjFhZDIzMmI1Y2JkZjY4ZmRkZGU2ZTJjMDQyZTkyOGJlODA0ODc4Njc3ODZhODBjNjgxMDI0NDNjNCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L1JlZGlzU2VydmljZS5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjYxIiwiYmxvYl9uYW1lIjoiNzE4OTU5OTM0MTk5MjVmNmRlYTFjY2E4NDEyYjIyMmQzYzRhMDc5M2U3NTc3ZmYxNDYwMjZhOGMxNDc2ODQzNyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9TdHJpbmdIYW5kbGVyLmphdmEifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNDkwIiwiYmxvYl9uYW1lIjoiMzlmMmYyMzFiZTc2NDY4MzhhY2MxOTcyMDZkODhkODI1MjZlNWQxODRkMjMwY2VjZjJhYmYyMWRhOTE2Yjc5OSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Ii5naXRpZ25vcmUifX1dfV0sImZlZWRiYWNrU3RhdGVzIjp7InRlbXAtZmUtZDBhZWQ1ZmEtNGJiZi00MWU2LWEyMWUtMTg5NjMyMzdiN2EzIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifX0sInRvb2xVc2VTdGF0ZXMiOnt9LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IueOsOWcqOS8muaciemYu+WhnueahOaDheWGtSAiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijoi546w5Zyo5Lya5pyJ6Zi75aGe55qE5oOF5Ya1ICJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RhdHVzIjoiZHJhZnQifSwiZHJhZnRBY3RpdmVDb250ZXh0SWRzIjpbIkY6L21pbmlSZWRpcy9zcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvbWluaVJlZGlzU2VydmVyLmphdmEiLCJGOi9taW5pUmVkaXNmYWxzZWZhbHNlIiwidXNlckd1aWRlbGluZXMiXSwicmVxdWVzdElkcyI6W10sImlzUGlubmVkIjpmYWxzZSwiaXNTaGFyZWFibGUiOnRydWUsImV4dHJhRGF0YSI6eyJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowfSwiNjZhMmJlODUtZWQxOC00YjU3LWFkZjgtMDFkYzkxMDAzMzg5Ijp7ImlkIjoiNjZhMmJlODUtZWQxOC00YjU3LWFkZjgtMDFkYzkxMDAzMzg5IiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNS0wOFQxMzo0NjoyMS4yMzFaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDUtMDhUMTM6NDY6MjEuMjMxWiIsImNoYXRIaXN0b3J5IjpbXSwiZmVlZGJhY2tTdGF0ZXMiOnt9LCJ0b29sVXNlU3RhdGVzIjp7fSwiZHJhZnRFeGNoYW5nZSI6eyJyZXF1ZXN0X21lc3NhZ2UiOiLov5nph4xwaXBlbGluZemHjOato+ehrueahOmhuuW6j+W6lOivpeaYr+S7gOS5iOagt+eahOWRoiDmt7HlhaXmtYXlh7rkuLrmiJHorrLkuIDorrIiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijoi6L+Z6YeMcGlwZWxpbmXph4zmraPnoa7nmoTpobrluo/lupTor6XmmK/ku4DkuYjmoLfnmoTlkaIg5rex5YWl5rWF5Ye65Li65oiR6K6y5LiA6K6yIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdGF0dXMiOiJkcmFmdCJ9LCJkcmFmdEFjdGl2ZUNvbnRleHRJZHMiOlsiRjovbWluaVJlZGlzL3NyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YSIsIkY6L21pbmlSZWRpc2ZhbHNlZmFsc2UiLCJ1c2VyR3VpZGVsaW5lcyJdLCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6ZmFsc2UsImV4dHJhRGF0YSI6eyJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowfSwiMmFkYzFkNGItMzY3MC00YjJlLTk3MTUtNTI3YjVhYmQ0ZmE3Ijp7ImlkIjoiMmFkYzFkNGItMzY3MC00YjJlLTk3MTUtNTI3YjVhYmQ0ZmE3IiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNS0wOFQxMzo0NjozNS4zMDBaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDUtMDhUMjA6MDk6MTEuNjE5WiIsImNoYXRIaXN0b3J5IjpbeyJyZXF1ZXN0X2lkIjoiNTRjYzA4NGMtYTE3NC00MGQ0LThiN2QtM2I5NjY3ZGFkNzEzIiwidXVpZCI6IjczMjY0YTEwLTg0NzUtNGE0MS1hYTZjLTMwMzdhMzI3Nzc3MSIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDY3MTE5OTUzMDEsInNlZW5fc3RhdGUiOiJzZWVuIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjE3NTlhM2YyLWMxZjEtNDIyMC1iY2EwLTE4NmM2MTYyYTRmZSIsInJlcXVlc3RfbWVzc2FnZSI6Iui/memHjHBpcGVsaW5l6YeM5q2j56Gu55qE6aG65bqP5bqU6K+l5piv5LuA5LmI5qC355qE5ZGiIOa3seWFpea1heWHuuS4uuaIkeiusuS4gOiusiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiLov5nph4xwaXBlbGluZemHjOato+ehrueahOmhuuW6j+W6lOivpeaYr+S7gOS5iOagt+eahOWRoiDmt7HlhaXmtYXlh7rkuLrmiJHorrLkuIDorrIifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVM0eEJpM1FqWnRkSnBrZzZGWWtmRTQiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlxcdTY3ZTVcXHU2MjdlXFx1NTE3M1xcdTRlOGUgcGlwZWxpbmUgXFx1NWI5ZVxcdTczYjBcXHU3Njg0XFx1NGVlM1xcdTc4MDFcXHVmZjBjXFx1NzI3OVxcdTUyMmJcXHU2NjJmXFx1NTcyOCBtaW5pUmVkaXNTZXJ2ZXIuamF2YSBcXHU2MjE2XFx1NTE3NlxcdTRlZDZcXHU3NmY4XFx1NTE3M1xcdTY1ODdcXHU0ZWY2XFx1NGUyZFxcdTc2ODQgcGlwZWxpbmUgXFx1NTkwNFxcdTc0MDZcXHU2ZDQxXFx1N2EwYlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuimgeeQhuinoyBtaW5pUmVkaXMg5LitIHBpcGVsaW5lIOeahOato+ehrumhuuW6j++8jOaIkemcgOimgeWFiOafpeeci+ebuOWFs+S7o+eggeadpeS6huino+WFtuWunueOsOOAguiuqeaIkeajgOe0ouS4gOS4i+WFs+S6jiBwaXBlbGluZSDnmoTku6PnoIHkv6Hmga/jgIJcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50Ijoi6L+Z6YeMcGlwZWxpbmXph4zmraPnoa7nmoTpobrluo/lupTor6XmmK/ku4DkuYjmoLfnmoTlkaIg5rex5YWl5rWF5Ye65Li65oiR6K6y5LiA6K6yIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRjovbWluaVJlZGlzIiwiZm9sZGVyUm9vdCI6IkY6L21pbmlSZWRpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTM6NDY6MzYuNDY5WiIsInJlc3BvbnNlX3RleHQiOiLopoHnkIbop6MgbWluaVJlZGlzIOS4rSBwaXBlbGluZSDnmoTmraPnoa7pobrluo/vvIzmiJHpnIDopoHlhYjmn6XnnIvnm7jlhbPku6PnoIHmnaXkuobop6Plhbblrp7njrDjgILorqnmiJHmo4DntKLkuIDkuIvlhbPkuo4gcGlwZWxpbmUg55qE5Luj56CB5L+h5oGv44CCXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOTE4NTU0NzItZTBiNC00OTkyLWE5OTItY2UzZmVlMGJiYjY3IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQTZDZk5xNWVuekVpVHhNajdxOHBycyIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvbWluaVJlZGlzU2VydmVyLmphdmFcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLmiJHnnIvliLDkuobkuIDkupvlhbPkuo4gcGlwZWxpbmUg55qE5Luj56CB77yM5L2G5L+h5oGv5LiN5aSf5a6M5pW044CC6K6p5oiR5p+l55yL5pu05aSa5YWz5LqOIE5ldHR5IHBpcGVsaW5lIOeahOWunueOsOe7huiKgu+8jOeJueWIq+aYr+WcqCBtaW5pUmVkaXNTZXJ2ZXIg5Lit55qE6YWN572u44CCXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvbWluaVJlZGlzU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlcjtcblxuaW1wb3J0IGlvLm5ldHR5LmJvb3RzdHJhcC5TZXJ2ZXJCb290c3RyYXA7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEluaXRpYWxpemVyO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbFBpcGVsaW5lO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuRXZlbnRMb29wR3JvdXA7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5uaW8uTmlvRXZlbnRMb29wR3JvdXA7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5zb2NrZXQuU29ja2V0Q2hhbm5lbDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5uaW8uTmlvU2VydmVyU29ja2V0Q2hhbm5lbDtcbmltcG9ydCBpby5uZXR0eS5oYW5kbGVyLmNvZGVjLnN0cmluZy5TdHJpbmdEZWNvZGVyO1xuaW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0VuY29kZXI7XG5pbXBvcnQgbG9tYm9rLmV4dGVybi5zbGY0ai5TbGY0ajtcblxuQFNsZjRqXG5wdWJsaWMgY2xhc3MgbWluaVJlZGlzU2VydmVyIGltcGxlbWVudHMgUmVkaXNTZXJ2ZXJ7XG5cbiAgICBwcml2YXRlIFN0cmluZyBob3N0O1xuICAgIHByaXZhdGUgaW50IHBvcnQ7XG5cbiAgICBwcml2YXRlIENoYW5uZWwgc2VydmVyQ2hhbm5lbDtcblxuICAgIHByaXZhdGUgRXZlbnRMb29wR3JvdXAgYm9zc0dyb3VwO1xuICAgIHByaXZhdGUgRXZlbnRMb29wR3JvdXAgd29ya2VyR3JvdXA7XG5cbiAgICBwdWJsaWMgbWluaVJlZGlzU2VydmVyKFN0cmluZyBob3N0LCBpbnQgcG9ydCkge1xuICAgICAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLnBvcnQgPSBwb3J0O1xuICAgICAgICB0aGlzLmJvc3NHcm91cCA9IG5ldyBOaW9FdmVudExvb3BHcm91cCgxKTtcbiAgICAgICAgdGhpcy53b3JrZXJHcm91cCA9IG5ldyBOaW9FdmVudExvb3BHcm91cCg0KTtcbiAgICB9XG5cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIHN0YXJ0KCkge1xuICAgICAgICBTZXJ2ZXJCb290c3RyYXAgc2VydmVyQm9vdHN0cmFwID0gbmV3IFNlcnZlckJvb3RzdHJhcCgpO1xuICAgICAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcbiAgICAgICAgICAgICAgICAuY2hhbm5lbChOaW9TZXJ2ZXJTb2NrZXRDaGFubmVsLmNsYXNzKVxuICAgICAgICAgICAgICAgIC5jaGlsZE9wdGlvbihuZXcgQ2hhbm5lbEluaXRpYWxpemVyPFNvY2tldENoYW5uZWw+KCkge1xuICAgICAgICAgICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgaW5pdENoYW5uZWwoU29ja2V0Q2hhbm5lbCBjaCkgdGhyb3dzIEV4Y2VwdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDaGFubmVsUGlwZWxpbmUgcGlwZWxpbmUgPSBjaC5waXBlbGluZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRGVjb2RlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIHN0b3AoKSB7XG5cbiAgICB9XG59XG4uLi5cblBhdGg6IHBvbS54bWxcbjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PlxuPHByb2plY3QgeG1sbnM9XCJodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy9QT00vNC4wLjBcIlxuICAgICAgICAgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIlxuICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPVwiaHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4wIGh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL3hzZC9tYXZlbi00LjAuMC54c2RcIj5cbiAgICA8bW9kZWxWZXJzaW9uPjQuMC4wPC9tb2RlbFZlcnNpb24+XG5cbiAgICA8Z3JvdXBJZD5zaXRlLmhuZnkyNTg8L2dyb3VwSWQ+XG4gICAgPGFydGlmYWN0SWQ+bWluaVJlZGlzPC9hcnRpZmFjdElkPlxuICAgIDx2ZXJzaW9uPjEuMC1TTkFQU0hPVDwvdmVyc2lvbj5cblxuICAgIDxwcm9wZXJ0aWVzPlxuICAgICAgICA8bWF2ZW4uY29tcGlsZXIuc291cmNlPjg8L21hdmVuLmNvbXBpbGVyLnNvdXJjZT5cbiAgICAgICAgPG1hdmVuLmNvbXBpbGVyLnRhcmdldD44PC9tYXZlbi5jb21waWxlci50YXJnZXQ+XG4gICAgICAgIDxwcm9qZWN0LmJ1aWxkLnNvdXJjZUVuY29kaW5nPlVURi04PC9wcm9qZWN0LmJ1aWxkLnNvdXJjZUVuY29kaW5nPlxuICAgIDwvcHJvcGVydGllcz5cbiAgICBcbjwvcHJvamVjdD4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9SZWRpc1NlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1ODtcblxucHVibGljIGludGVyZmFjZSBSZWRpc1NlcnZlcntcbiAgICB2b2lkIHN0YXJ0KCk7XG4gICAgdm9pZCBzdG9wKCk7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L1JlZGlzU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4O1xuXG5wdWJsaWMgaW50ZXJmYWNlIFJlZGlzU2VydmVye1xuICAgIHZvaWQgc3RhcnQoKTtcbiAgICB2b2lkIHN0b3AoKTtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvbGF1bmNoZXIvUmVkaXNTZXJ2ZXJMYW5jaGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LmxhdW5jaGVyO1xuXG5wdWJsaWMgY2xhc3MgUmVkaXNTZXJ2ZXJMYW5jaGVyIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvbGF1bmNoZXIvUmVkaXNTZXJ2ZXJMYXVuY2hlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5sYXVuY2hlcjtcblxucHVibGljIGNsYXNzIFJlZGlzU2VydmVyTGF1bmNoZXIge1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9SZWRpc1NlcnZpY2UuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTg7XG5cbnB1YmxpYyBpbnRlcmZhY2UgUmVkaXNTZXJ2aWNlIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL1N0cmluZ0hhbmRsZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyO1xuXG5wdWJsaWMgY2xhc3MgU3RyaW5nSGFuZGxlciB7XG59XG4uLi5cblBhdGg6IC5naXRpZ25vcmVcbnRhcmdldC9cbiEubXZuL3dyYXBwZXIvbWF2ZW4td3JhcHBlci5qYXJcbiEqKi9zcmMvbWFpbi8qKi90YXJnZXQvXG4hKiovc3JjL3Rlc3QvKiovdGFyZ2V0L1xuXG4jIyMgSW50ZWxsaUogSURFQSAjIyNcbi5pZGVhL21vZHVsZXMueG1sXG4uaWRlYS9qYXJSZXBvc2l0b3JpZXMueG1sXG4uaWRlYS9jb21waWxlci54bWxcbi5pZGVhL2xpYnJhcmllcy9cbiouaXdzXG4qLmltbFxuKi5pcHJcblxuIyMjIEVjbGlwc2UgIyMjXG4uYXB0X2dlbmVyYXRlZFxuLmNsYXNzcGF0aFxuLmZhY3RvcnlwYXRoXG4ucHJvamVjdFxuLnNldHRpbmdzXG4uc3ByaW5nQmVhbnNcbi5zdHM0LWNhY2hlXG5cbiMjIyBOZXRCZWFucyAjIyNcbi9uYnByb2plY3QvcHJpdmF0ZS9cbi9uYmJ1aWxkL1xuL2Rpc3QvXG4vbmJkaXN0L1xuLy5uYi1ncmFkbGUvXG5idWlsZC9cbiEqKi9zcmMvbWFpbi8qKi9idWlsZC9cbiEqKi9zcmMvdGVzdC8qKi9idWlsZC9cblxuIyMjIFZTIENvZGUgIyMjXG4udnNjb2RlL1xuXG4jIyMgTWFjIE9TICMjI1xuLkRTX1N0b3JlLi4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFTNHhCaTNRalp0ZEpwa2c2RllrZkU0In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRjovbWluaVJlZGlzIiwiZm9sZGVyUm9vdCI6IkY6L21pbmlSZWRpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDhUMTM6NDY6NDcuOTc5WiIsInJlc3BvbnNlX3RleHQiOiLmiJHnnIvliLDkuobkuIDkupvlhbPkuo4gcGlwZWxpbmUg55qE5Luj56CB77yM5L2G5L+h5oGv5LiN5aSf5a6M5pW044CC6K6p5oiR5p+l55yL5pu05aSa5YWz5LqOIE5ldHR5IHBpcGVsaW5lIOeahOWunueOsOe7huiKgu+8jOeJueWIq+aYr+WcqCBtaW5pUmVkaXNTZXJ2ZXIg5Lit55qE6YWN572u44CCXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZTljMTZhYzgtODQyMy00OWRkLWE4OTUtYjA3MDExNWFhNjg0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxM2RCQXJ1TWZCeFI3YzRUSjZuS2F2VyIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvU3RyaW5nSGFuZGxlci5qYXZhXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi6K6p5oiR5p+l55yL5LiA5LiLIFN0cmluZ0hhbmRsZXIg57G755qE5a6e546w77yM5Lul5L6/5pu05aW95Zyw55CG6KejIHBpcGVsaW5lIOeahOWkhOeQhua1geeoi++8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvbWluaVJlZGlzU2VydmVyLmphdmE6XG4gICAgIDFcdHBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlcjtcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCBpby5uZXR0eS5ib290c3RyYXAuU2VydmVyQm9vdHN0cmFwO1xuICAgICA0XHRpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsO1xuICAgICA1XHRpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5pdGlhbGl6ZXI7XG4gICAgIDZcdGltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxQaXBlbGluZTtcbiAgICAgN1x0aW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuRXZlbnRMb29wR3JvdXA7XG4gICAgIDhcdGltcG9ydCBpby5uZXR0eS5jaGFubmVsLm5pby5OaW9FdmVudExvb3BHcm91cDtcbiAgICAgOVx0aW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0LlNvY2tldENoYW5uZWw7XG4gICAgMTBcdGltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5uaW8uTmlvU2VydmVyU29ja2V0Q2hhbm5lbDtcbiAgICAxMVx0aW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0RlY29kZXI7XG4gICAgMTJcdGltcG9ydCBpby5uZXR0eS5oYW5kbGVyLmNvZGVjLnN0cmluZy5TdHJpbmdFbmNvZGVyO1xuICAgIDEzXHRcbiAgICAxNFx0cHVibGljIGNsYXNzIG1pbmlSZWRpc1NlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xuICAgIDE1XHRcbiAgICAxNlx0ICAgIHByaXZhdGUgU3RyaW5nIGhvc3Q7XG4gICAgMTdcdCAgICBwcml2YXRlIGludCBwb3J0O1xuICAgIDE4XHRcbiAgICAxOVx0ICAgIHByaXZhdGUgQ2hhbm5lbCBzZXJ2ZXJDaGFubmVsO1xuICAgIDIwXHRcbiAgICAyMVx0ICAgIHByaXZhdGUgRXZlbnRMb29wR3JvdXAgYm9zc0dyb3VwO1xuICAgIDIyXHQgICAgcHJpdmF0ZSBFdmVudExvb3BHcm91cCB3b3JrZXJHcm91cDtcbiAgICAyM1x0XG4gICAgMjRcdCAgICBwdWJsaWMgbWluaVJlZGlzU2VydmVyKFN0cmluZyBob3N0LCBpbnQgcG9ydCkge1xuICAgIDI1XHQgICAgICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gICAgMjZcdCAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAyN1x0ICAgICAgICB0aGlzLmJvc3NHcm91cCA9IG5ldyBOaW9FdmVudExvb3BHcm91cCgxKTtcbiAgICAyOFx0ICAgICAgICB0aGlzLndvcmtlckdyb3VwID0gbmV3IE5pb0V2ZW50TG9vcEdyb3VwKDQpO1xuICAgIDI5XHQgICAgfVxuICAgIDMwXHRcbiAgICAzMVx0XG4gICAgMzJcdCAgICBAT3ZlcnJpZGVcbiAgICAzM1x0ICAgIHB1YmxpYyB2b2lkIHN0YXJ0KCkge1xuICAgIDM0XHQgICAgICAgIFNlcnZlckJvb3RzdHJhcCBzZXJ2ZXJCb290c3RyYXAgPSBuZXcgU2VydmVyQm9vdHN0cmFwKCk7XG4gICAgMzVcdFxuICAgIDM2XHQgICAgICAgIHNlcnZlckJvb3RzdHJhcC5ncm91cChib3NzR3JvdXAsIHdvcmtlckdyb3VwKVxuICAgIDM3XHQgICAgICAgICAgICAgICAgLmNoYW5uZWwoTmlvU2VydmVyU29ja2V0Q2hhbm5lbC5jbGFzcylcbiAgICAzOFx0ICAgICAgICAgICAgICAgIC5jaGlsZEhhbmRsZXIobmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcbiAgICAzOVx0ICAgICAgICAgICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICA0MFx0ICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBpbml0Q2hhbm5lbChTb2NrZXRDaGFubmVsIGNoKSB0aHJvd3MgRXhjZXB0aW9uIHtcbiAgICA0MVx0ICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcbiAgICA0Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRGVjb2RlcigpKTtcbiAgICA0M1x0XG4gICAgNDRcdCAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0VuY29kZXIoKSk7XG4gICAgNDVcdCAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0hhbmRsZXIoKSk7XG4gICAgNDZcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgIDQ3XHQgICAgICAgICAgICAgICAgfSk7XG4gICAgNDhcdFxuICAgIDQ5XHQgICAgICAgIHNlcnZlckJvb3RzdHJhcC5iaW5kKGhvc3QsIHBvcnQpO1xuICAgIDUwXHQgICAgfVxuICAgIDUxXHRcbiAgICA1Mlx0ICAgIEBPdmVycmlkZVxuICAgIDUzXHQgICAgcHVibGljIHZvaWQgc3RvcCgpIHtcbiAgICA1NFx0ICAgICAgICBib3NzR3JvdXAuc2h1dGRvd25HcmFjZWZ1bGx5KCk7XG4gICAgNTVcdCAgICAgICAgd29ya2VyR3JvdXAuc2h1dGRvd25HcmFjZWZ1bGx5KCk7XG4gICAgNTZcdCAgICAgICAgc2VydmVyQ2hhbm5lbC5jbG9zZSgpO1xuICAgIDU3XHQgICAgfVxuICAgIDU4XHR9XG4gICAgNTlcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogNTlcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUE2Q2ZOcTVlbnpFaVR4TWo3cThwcnMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJGOi9taW5pUmVkaXMiLCJmb2xkZXJSb290IjoiRjovbWluaVJlZGlzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQxMzo0NzowNS4wNTVaIiwicmVzcG9uc2VfdGV4dCI6IuiuqeaIkeafpeeci+S4gOS4iyBTdHJpbmdIYW5kbGVyIOexu+eahOWunueOsO+8jOS7peS+v+abtOWlveWcsOeQhuinoyBwaXBlbGluZSDnmoTlpITnkIbmtYHnqIvvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoiZmFpbGVkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOltdLCJzZWVuX3N0YXRlIjoidW5zZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvU3RyaW5nSGFuZGxlci5qYXZhOlxuICAgICAxXHRwYWNrYWdlIHNpdGUuaG5meTI1OC5zZXJ2ZXI7XG4gICAgIDJcdFxuICAgICAzXHRpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSGFuZGxlcjtcbiAgICAgNFx0aW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEhhbmRsZXJDb250ZXh0O1xuICAgICA1XHRpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5ib3VuZEhhbmRsZXI7XG4gICAgIDZcdGltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxJbmJvdW5kSGFuZGxlckFkYXB0ZXI7XG4gICAgIDdcdFxuICAgICA4XHRwdWJsaWMgY2xhc3MgU3RyaW5nSGFuZGxlciBleHRlbmRzIENoYW5uZWxJbmJvdW5kSGFuZGxlckFkYXB0ZXIge1xuICAgICA5XHQgICAgQE92ZXJyaWRlXG4gICAgMTBcdCAgICBwdWJsaWMgdm9pZCBjaGFubmVsUmVhZChDaGFubmVsSGFuZGxlckNvbnRleHQgY3R4LCBPYmplY3QgbXNnKSB0aHJvd3MgRXhjZXB0aW9ue1xuICAgIDExXHQgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIlJlY2VpdmVkOiBcIiArIG1zZyk7XG4gICAgMTJcdCAgICB9XG4gICAgMTNcdH1cbiAgICAxNFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxNFxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxM2RCQXJ1TWZCeFI3YzRUSjZuS2F2VyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkY6L21pbmlSZWRpcyIsImZvbGRlclJvb3QiOiJGOi9taW5pUmVkaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTA4VDEzOjQ3OjExLjA1MloifSx7InJlcXVlc3RfaWQiOiI1OTBjYTRlNi0xNjI0LTQyOWUtOGUxZi1lNWExNzcwOWJlNzYiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJjYW5jZWxsZWQiLCJyZXF1ZXN0X2lkIjoiODMzZWI2OTAtOWFlYy00NzkwLTgzZTUtMjNmYjAxNTA4YmJkIiwicmVxdWVzdF9tZXNzYWdlIjoi5oiR546w5Zyo55qE6ZyA5rGC5pivIOWPr+S7peWSjHJlZGlz6L+e5o6lIOS9huaYr+S8muaKiuS5seeggeaJk+WNsOWHuuadpSAgcmVkaXPlrqLmiLfnq6/kuK3kuI3kvJrpmLvloZ4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijoi5oiR546w5Zyo55qE6ZyA5rGC5pivIOWPr+S7peWSjHJlZGlz6L+e5o6lIOS9huaYr+S8muaKiuS5seeggeaJk+WNsOWHuuadpSAgcmVkaXPlrqLmiLfnq6/kuK3kuI3kvJrpmLvloZ4ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMThQM1NVWVJwcDJqRVI2MnlGU202QU0iLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlxcdTY3ZTVcXHU2MjdlXFx1NTE3M1xcdTRlOGUgUmVkaXMgXFx1NTM0ZlxcdThiYWVcXHU1OTA0XFx1NzQwNlxcdTc2ODRcXHU0ZWUzXFx1NzgwMVxcdWZmMGNcXHU1MzA1XFx1NjJlYyBTdHJpbmdIYW5kbGVyIFxcdTc2ODRcXHU1YjllXFx1NzNiMFxcdTU0OGNcXHU1MTc2XFx1NGVkNlxcdTUzZWZcXHU4MGZkXFx1NzY4NFxcdTU5MDRcXHU3NDA2XFx1NTY2OFxcdWZmMGNcXHU0ZWU1XFx1NTNjYVxcdTRlZmJcXHU0ZjU1XFx1NGUwZSBSZWRpcyBcXHU1YmEyXFx1NjIzN1xcdTdhZWZcXHU5MDFhXFx1NGZlMVxcdTc2ZjhcXHU1MTczXFx1NzY4NFxcdTRlZTNcXHU3ODAxXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLmiJHnjrDlnKjnmoTpnIDmsYLmmK8g5Y+v5Lul5ZKMcmVkaXPov57mjqUg5L2G5piv5Lya5oqK5Lmx56CB5omT5Y2w5Ye65p2lICByZWRpc+WuouaIt+err+S4reS4jeS8mumYu+WhniJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkY6L21pbmlSZWRpcyIsImZvbGRlclJvb3QiOiJGOi9taW5pUmVkaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTA4VDEzOjQ4OjEyLjMzM1oiLCJyZXNwb25zZV90ZXh0Ijoi5oiR55CG6Kej5oKo55qE6ZyA5rGC5piv5oOz6KaB5a6e546w5LiA5Liq6IO95aSf5LiOIFJlZGlzIOWuouaIt+err+i/nuaOpeeahOacjeWKoeWZqO+8jOS9humcgOimgeino+WGs+S7peS4i+mXrumimO+8mlxuMS4g6IO95aSf5omT5Y2w5Ye65o6l5pS25Yiw55qE5Y+v6IO95piv5Lmx56CB55qE5pWw5o2uXG4yLiDnoa7kv50gUmVkaXMg5a6i5oi356uv5LiN5Lya6KKr6Zi75aGeXG5cbuiuqeaIkeWFiOafpeeci+abtOWkmuWFs+S6juaCqOeahOS7o+eggeWunueOsO+8jOeJueWIq+aYr+WFs+S6jiBSZWRpcyDljY/orq7lpITnkIblkowgcGlwZWxpbmUg55qE6YOo5YiG44CCXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiI0YmI3MzE4MC0xZDJkLTRlMDEtYjdkNi04OTkxYTNhMGVjNjAiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn1dLCJmZWVkYmFja1N0YXRlcyI6eyJ0ZW1wLWZlLTYzZmI2ZDJmLTJhNDEtNDE5Yy1iYzY4LTI2Y2YzMzdhMThmMSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYTMxYzg4NzUtYWI1Yi00MzRjLWFlNWUtYWFhZjNjZWU2ZDVkIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yYjdhYmQxNi1jOTY3LTQ4MWYtYTk5Yi1kMWU2MTZhMDdhYmIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTFlZjhmNGZiLTA4YjctNGJiNS1hZjI5LTk3YmYyNDY2MjVkMCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNGIxNWRmNWItMzBkMS00NjczLTkwNTUtOThjMDhmN2UxMjk2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifX0sInRvb2xVc2VTdGF0ZXMiOnsiMTc1OWEzZjItYzFmMS00MjIwLWJjYTAtMTg2YzYxNjJhNGZlO3Rvb2x1X3ZydHhfMDFTNHhCaTNRalp0ZEpwa2c2RllrZkU0Ijp7InJlcXVlc3RJZCI6IjE3NTlhM2YyLWMxZjEtNDIyMC1iY2EwLTE4NmM2MTYyYTRmZSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFTNHhCaTNRalp0ZEpwa2c2RllrZkU0IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL21pbmlSZWRpc1NlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5zZXJ2ZXI7XG5cbmltcG9ydCBpby5uZXR0eS5ib290c3RyYXAuU2VydmVyQm9vdHN0cmFwO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxJbml0aWFsaXplcjtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxQaXBlbGluZTtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkV2ZW50TG9vcEdyb3VwO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwubmlvLk5pb0V2ZW50TG9vcEdyb3VwO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0LlNvY2tldENoYW5uZWw7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5zb2NrZXQubmlvLk5pb1NlcnZlclNvY2tldENoYW5uZWw7XG5pbXBvcnQgaW8ubmV0dHkuaGFuZGxlci5jb2RlYy5zdHJpbmcuU3RyaW5nRGVjb2RlcjtcbmltcG9ydCBpby5uZXR0eS5oYW5kbGVyLmNvZGVjLnN0cmluZy5TdHJpbmdFbmNvZGVyO1xuaW1wb3J0IGxvbWJvay5leHRlcm4uc2xmNGouU2xmNGo7XG5cbkBTbGY0alxucHVibGljIGNsYXNzIG1pbmlSZWRpc1NlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xuXG4gICAgcHJpdmF0ZSBTdHJpbmcgaG9zdDtcbiAgICBwcml2YXRlIGludCBwb3J0O1xuXG4gICAgcHJpdmF0ZSBDaGFubmVsIHNlcnZlckNoYW5uZWw7XG5cbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIGJvc3NHcm91cDtcbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIHdvcmtlckdyb3VwO1xuXG4gICAgcHVibGljIG1pbmlSZWRpc1NlcnZlcihTdHJpbmcgaG9zdCwgaW50IHBvcnQpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5ib3NzR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoMSk7XG4gICAgICAgIHRoaXMud29ya2VyR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoNCk7XG4gICAgfVxuXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBzdGFydCgpIHtcbiAgICAgICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcbiAgICAgICAgc2VydmVyQm9vdHN0cmFwLmdyb3VwKGJvc3NHcm91cCwgd29ya2VyR3JvdXApXG4gICAgICAgICAgICAgICAgLmNoYW5uZWwoTmlvU2VydmVyU29ja2V0Q2hhbm5lbC5jbGFzcylcbiAgICAgICAgICAgICAgICAuY2hpbGRPcHRpb24obmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcbiAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGluaXRDaGFubmVsKFNvY2tldENoYW5uZWwgY2gpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBzdG9wKCkge1xuXG4gICAgfVxufVxuLi4uXG5QYXRoOiBwb20ueG1sXG48P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cbjxwcm9qZWN0IHhtbG5zPVwiaHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4wXCJcbiAgICAgICAgIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCJcbiAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj1cImh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMCBodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy94c2QvbWF2ZW4tNC4wLjAueHNkXCI+XG4gICAgPG1vZGVsVmVyc2lvbj40LjAuMDwvbW9kZWxWZXJzaW9uPlxuXG4gICAgPGdyb3VwSWQ+c2l0ZS5obmZ5MjU4PC9ncm91cElkPlxuICAgIDxhcnRpZmFjdElkPm1pbmlSZWRpczwvYXJ0aWZhY3RJZD5cbiAgICA8dmVyc2lvbj4xLjAtU05BUFNIT1Q8L3ZlcnNpb24+XG5cbiAgICA8cHJvcGVydGllcz5cbiAgICAgICAgPG1hdmVuLmNvbXBpbGVyLnNvdXJjZT44PC9tYXZlbi5jb21waWxlci5zb3VyY2U+XG4gICAgICAgIDxtYXZlbi5jb21waWxlci50YXJnZXQ+ODwvbWF2ZW4uY29tcGlsZXIudGFyZ2V0PlxuICAgICAgICA8cHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5VVEYtODwvcHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5cbiAgICA8L3Byb3BlcnRpZXM+XG4gICAgXG48L3Byb2plY3Q+Li4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTg7XG5cbnB1YmxpYyBpbnRlcmZhY2UgUmVkaXNTZXJ2ZXJ7XG4gICAgdm9pZCBzdGFydCgpO1xuICAgIHZvaWQgc3RvcCgpO1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9SZWRpc1NlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1ODtcblxucHVibGljIGludGVyZmFjZSBSZWRpc1NlcnZlcntcbiAgICB2b2lkIHN0YXJ0KCk7XG4gICAgdm9pZCBzdG9wKCk7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L2xhdW5jaGVyL1JlZGlzU2VydmVyTGFuY2hlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5sYXVuY2hlcjtcblxucHVibGljIGNsYXNzIFJlZGlzU2VydmVyTGFuY2hlciB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L2xhdW5jaGVyL1JlZGlzU2VydmVyTGF1bmNoZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgubGF1bmNoZXI7XG5cbnB1YmxpYyBjbGFzcyBSZWRpc1NlcnZlckxhdW5jaGVyIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvUmVkaXNTZXJ2aWNlLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4O1xuXG5wdWJsaWMgaW50ZXJmYWNlIFJlZGlzU2VydmljZSB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9TdHJpbmdIYW5kbGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlcjtcblxucHVibGljIGNsYXNzIFN0cmluZ0hhbmRsZXIge1xufVxuLi4uXG5QYXRoOiAuZ2l0aWdub3JlXG50YXJnZXQvXG4hLm12bi93cmFwcGVyL21hdmVuLXdyYXBwZXIuamFyXG4hKiovc3JjL21haW4vKiovdGFyZ2V0L1xuISoqL3NyYy90ZXN0LyoqL3RhcmdldC9cblxuIyMjIEludGVsbGlKIElERUEgIyMjXG4uaWRlYS9tb2R1bGVzLnhtbFxuLmlkZWEvamFyUmVwb3NpdG9yaWVzLnhtbFxuLmlkZWEvY29tcGlsZXIueG1sXG4uaWRlYS9saWJyYXJpZXMvXG4qLml3c1xuKi5pbWxcbiouaXByXG5cbiMjIyBFY2xpcHNlICMjI1xuLmFwdF9nZW5lcmF0ZWRcbi5jbGFzc3BhdGhcbi5mYWN0b3J5cGF0aFxuLnByb2plY3Rcbi5zZXR0aW5nc1xuLnNwcmluZ0JlYW5zXG4uc3RzNC1jYWNoZVxuXG4jIyMgTmV0QmVhbnMgIyMjXG4vbmJwcm9qZWN0L3ByaXZhdGUvXG4vbmJidWlsZC9cbi9kaXN0L1xuL25iZGlzdC9cbi8ubmItZ3JhZGxlL1xuYnVpbGQvXG4hKiovc3JjL21haW4vKiovYnVpbGQvXG4hKiovc3JjL3Rlc3QvKiovYnVpbGQvXG5cbiMjIyBWUyBDb2RlICMjI1xuLnZzY29kZS9cblxuIyMjIE1hYyBPUyAjIyNcbi5EU19TdG9yZS4uLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOTE4NTU0NzItZTBiNC00OTkyLWE5OTItY2UzZmVlMGJiYjY3O3Rvb2x1X3ZydHhfMDFBNkNmTnE1ZW56RWlUeE1qN3E4cHJzIjp7InJlcXVlc3RJZCI6IjkxODU1NDcyLWUwYjQtNDk5Mi1hOTkyLWNlM2ZlZTBiYmI2NyIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFBNkNmTnE1ZW56RWlUeE1qN3E4cHJzIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvbWluaVJlZGlzU2VydmVyLmphdmE6XG4gICAgIDFcdHBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlcjtcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCBpby5uZXR0eS5ib290c3RyYXAuU2VydmVyQm9vdHN0cmFwO1xuICAgICA0XHRpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsO1xuICAgICA1XHRpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5pdGlhbGl6ZXI7XG4gICAgIDZcdGltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxQaXBlbGluZTtcbiAgICAgN1x0aW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuRXZlbnRMb29wR3JvdXA7XG4gICAgIDhcdGltcG9ydCBpby5uZXR0eS5jaGFubmVsLm5pby5OaW9FdmVudExvb3BHcm91cDtcbiAgICAgOVx0aW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0LlNvY2tldENoYW5uZWw7XG4gICAgMTBcdGltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5uaW8uTmlvU2VydmVyU29ja2V0Q2hhbm5lbDtcbiAgICAxMVx0aW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0RlY29kZXI7XG4gICAgMTJcdGltcG9ydCBpby5uZXR0eS5oYW5kbGVyLmNvZGVjLnN0cmluZy5TdHJpbmdFbmNvZGVyO1xuICAgIDEzXHRcbiAgICAxNFx0cHVibGljIGNsYXNzIG1pbmlSZWRpc1NlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xuICAgIDE1XHRcbiAgICAxNlx0ICAgIHByaXZhdGUgU3RyaW5nIGhvc3Q7XG4gICAgMTdcdCAgICBwcml2YXRlIGludCBwb3J0O1xuICAgIDE4XHRcbiAgICAxOVx0ICAgIHByaXZhdGUgQ2hhbm5lbCBzZXJ2ZXJDaGFubmVsO1xuICAgIDIwXHRcbiAgICAyMVx0ICAgIHByaXZhdGUgRXZlbnRMb29wR3JvdXAgYm9zc0dyb3VwO1xuICAgIDIyXHQgICAgcHJpdmF0ZSBFdmVudExvb3BHcm91cCB3b3JrZXJHcm91cDtcbiAgICAyM1x0XG4gICAgMjRcdCAgICBwdWJsaWMgbWluaVJlZGlzU2VydmVyKFN0cmluZyBob3N0LCBpbnQgcG9ydCkge1xuICAgIDI1XHQgICAgICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gICAgMjZcdCAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAyN1x0ICAgICAgICB0aGlzLmJvc3NHcm91cCA9IG5ldyBOaW9FdmVudExvb3BHcm91cCgxKTtcbiAgICAyOFx0ICAgICAgICB0aGlzLndvcmtlckdyb3VwID0gbmV3IE5pb0V2ZW50TG9vcEdyb3VwKDQpO1xuICAgIDI5XHQgICAgfVxuICAgIDMwXHRcbiAgICAzMVx0XG4gICAgMzJcdCAgICBAT3ZlcnJpZGVcbiAgICAzM1x0ICAgIHB1YmxpYyB2b2lkIHN0YXJ0KCkge1xuICAgIDM0XHQgICAgICAgIFNlcnZlckJvb3RzdHJhcCBzZXJ2ZXJCb290c3RyYXAgPSBuZXcgU2VydmVyQm9vdHN0cmFwKCk7XG4gICAgMzVcdFxuICAgIDM2XHQgICAgICAgIHNlcnZlckJvb3RzdHJhcC5ncm91cChib3NzR3JvdXAsIHdvcmtlckdyb3VwKVxuICAgIDM3XHQgICAgICAgICAgICAgICAgLmNoYW5uZWwoTmlvU2VydmVyU29ja2V0Q2hhbm5lbC5jbGFzcylcbiAgICAzOFx0ICAgICAgICAgICAgICAgIC5jaGlsZEhhbmRsZXIobmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcbiAgICAzOVx0ICAgICAgICAgICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICA0MFx0ICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBpbml0Q2hhbm5lbChTb2NrZXRDaGFubmVsIGNoKSB0aHJvd3MgRXhjZXB0aW9uIHtcbiAgICA0MVx0ICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcbiAgICA0Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRGVjb2RlcigpKTtcbiAgICA0M1x0XG4gICAgNDRcdCAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0VuY29kZXIoKSk7XG4gICAgNDVcdCAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0hhbmRsZXIoKSk7XG4gICAgNDZcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgIDQ3XHQgICAgICAgICAgICAgICAgfSk7XG4gICAgNDhcdFxuICAgIDQ5XHQgICAgICAgIHNlcnZlckJvb3RzdHJhcC5iaW5kKGhvc3QsIHBvcnQpO1xuICAgIDUwXHQgICAgfVxuICAgIDUxXHRcbiAgICA1Mlx0ICAgIEBPdmVycmlkZVxuICAgIDUzXHQgICAgcHVibGljIHZvaWQgc3RvcCgpIHtcbiAgICA1NFx0ICAgICAgICBib3NzR3JvdXAuc2h1dGRvd25HcmFjZWZ1bGx5KCk7XG4gICAgNTVcdCAgICAgICAgd29ya2VyR3JvdXAuc2h1dGRvd25HcmFjZWZ1bGx5KCk7XG4gICAgNTZcdCAgICAgICAgc2VydmVyQ2hhbm5lbC5jbG9zZSgpO1xuICAgIDU3XHQgICAgfVxuICAgIDU4XHR9XG4gICAgNTlcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogNTlcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImU5YzE2YWM4LTg0MjMtNDlkZC1hODk1LWIwNzAxMTVhYTY4NDt0b29sdV92cnR4XzAxM2RCQXJ1TWZCeFI3YzRUSjZuS2F2VyI6eyJyZXF1ZXN0SWQiOiJlOWMxNmFjOC04NDIzLTQ5ZGQtYTg5NS1iMDcwMTE1YWE2ODQiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxM2RCQXJ1TWZCeFI3YzRUSjZuS2F2VyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL1N0cmluZ0hhbmRsZXIuamF2YTpcbiAgICAgMVx0cGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyO1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEhhbmRsZXI7XG4gICAgIDRcdGltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxIYW5kbGVyQ29udGV4dDtcbiAgICAgNVx0aW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEluYm91bmRIYW5kbGVyO1xuICAgICA2XHRpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5ib3VuZEhhbmRsZXJBZGFwdGVyO1xuICAgICA3XHRcbiAgICAgOFx0cHVibGljIGNsYXNzIFN0cmluZ0hhbmRsZXIgZXh0ZW5kcyBDaGFubmVsSW5ib3VuZEhhbmRsZXJBZGFwdGVyIHtcbiAgICAgOVx0ICAgIEBPdmVycmlkZVxuICAgIDEwXHQgICAgcHVibGljIHZvaWQgY2hhbm5lbFJlYWQoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCwgT2JqZWN0IG1zZykgdGhyb3dzIEV4Y2VwdGlvbntcbiAgICAxMVx0ICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJSZWNlaXZlZDogXCIgKyBtc2cpO1xuICAgIDEyXHQgICAgfVxuICAgIDEzXHR9XG4gICAgMTRcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMTRcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX19LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6dHJ1ZSwiZXh0cmFEYXRhIjp7ImlzQWdlbnRDb252ZXJzYXRpb24iOnRydWUsImhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjAsImRyYWZ0QWN0aXZlQ29udGV4dElkcyI6WyJGOi9taW5pUmVkaXMvc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL1JlZGlzTWluaVNlcnZlci5qYXZhIiwiRjovbWluaVJlZGlzZmFsc2VmYWxzZSIsInVzZXJHdWlkZWxpbmVzIiwiYWdlbnRNZW1vcmllcyJdfSwiM2YyZDkwYzUtZWE0Ny00ZjI5LWE2NDQtMzI1M2IxYjJhNTRhIjp7ImlkIjoiM2YyZDkwYzUtZWE0Ny00ZjI5LWE2NDQtMzI1M2IxYjJhNTRhIiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNS0wOFQyMDowOToxMy4zMTdaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDUtMDhUMjA6MDk6NTEuMzIwWiIsImNoYXRIaXN0b3J5IjpbeyJyZXF1ZXN0X2lkIjoiZTk0YTFjZmItMGVmYi00MTAyLWJjNWMtN2QxMjVlMmUwNWExIiwidXVpZCI6ImNjZjIxMzM3LWE4NjgtNGZmYy04ZGYzLTliZmFjMjMyYmY2MyIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDY3MzQ5NTMzMTksInNlZW5fc3RhdGUiOiJzZWVuIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjJjY2E4ZWNjLTVhNzUtNDliYS05N2RhLTc1NTUzZTA1NjhiNiIsInJlcXVlc3RfbWVzc2FnZSI6InBhY2thZ2Ugc2l0ZS5obmZ5LnNlcnZlcjtcclxuXHJcbmltcG9ydCBpby5uZXR0eS5ib290c3RyYXAuU2VydmVyQm9vdHN0cmFwO1xyXG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsO1xyXG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5pdGlhbGl6ZXI7XHJcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxQaXBlbGluZTtcclxuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuRXZlbnRMb29wR3JvdXA7XHJcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLm5pby5OaW9FdmVudExvb3BHcm91cDtcclxuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0LlNvY2tldENoYW5uZWw7XHJcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5uaW8uTmlvU2VydmVyU29ja2V0Q2hhbm5lbDtcclxuaW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0RlY29kZXI7XHJcbmltcG9ydCBpby5uZXR0eS5oYW5kbGVyLmNvZGVjLnN0cmluZy5TdHJpbmdFbmNvZGVyO1xyXG5pbXBvcnQgc2l0ZS5obmZ5LnNlcnZlci5oYW5kbGVyLlN0cmluZ0hhbmRsZXI7XHJcblxyXG5wdWJsaWMgY2xhc3MgUmVkaXNNaW5pU2VydmVyIGltcGxlbWVudHMgUmVkaXNTZXJ2ZXJ7XHJcbiAgICBwcml2YXRlIFN0cmluZyBob3N0O1xyXG4gICAgcHJpdmF0ZSBpbnQgcG9ydDtcclxuXHJcbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIGJvc3NHcm91cDtcclxuICAgIHByaXZhdGUgRXZlbnRMb29wR3JvdXAgd29ya2VyR3JvdXA7XHJcblxyXG4gICAgcHJpdmF0ZSBDaGFubmVsIHNlcnZlckNoYW5uZWw7XHJcblxyXG4gICAgcHVibGljIFJlZGlzTWluaVNlcnZlcihTdHJpbmcgaG9zdCwgaW50IHBvcnQpIHtcclxuICAgICAgICB0aGlzLmhvc3QgPSBob3N0O1xyXG4gICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XHJcbiAgICAgICAgdGhpcy5ib3NzR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoMSk7XHJcbiAgICAgICAgdGhpcy53b3JrZXJHcm91cCA9IG5ldyBOaW9FdmVudExvb3BHcm91cChSdW50aW1lLmdldFJ1bnRpbWUoKS5hdmFpbGFibGVQcm9jZXNzb3JzKCkgKjIpO1xyXG4gICAgfVxyXG4gICAgQE92ZXJyaWRlXHJcbiAgICBwdWJsaWMgdm9pZCBzdGFydCgpIHtcclxuICAgICAgICBTZXJ2ZXJCb290c3RyYXAgc2VydmVyQm9vdHN0cmFwID0gbmV3IFNlcnZlckJvb3RzdHJhcCgpO1xyXG4gICAgICAgIHNlcnZlckJvb3RzdHJhcC5ncm91cChib3NzR3JvdXAsIHdvcmtlckdyb3VwKVxyXG4gICAgICAgICAgICAgICAgLmNoYW5uZWwoTmlvU2VydmVyU29ja2V0Q2hhbm5lbC5jbGFzcylcclxuICAgICAgICAgICAgICAgIC5jaGlsZEhhbmRsZXIobmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcclxuICAgICAgICAgICAgICAgICAgICBAT3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBpbml0Q2hhbm5lbChTb2NrZXRDaGFubmVsIGNoKSB0aHJvd3MgRXhjZXB0aW9uIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRGVjb2RlcigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nSGFuZGxlcigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRW5jb2RlcigpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIHNlcnZlckNoYW5uZWwgPSBzZXJ2ZXJCb290c3RyYXAuYmluZChob3N0LCBwb3J0KS5zeW5jKCkuY2hhbm5lbCgpO1xyXG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJSZWRpcyBzZXJ2ZXIgc3RhcnRlZCBhdCBcIiArIGhvc3QgKyBcIjpcIiArIHBvcnQpO1xyXG4gICAgICAgIH1jYXRjaChJbnRlcnJ1cHRlZEV4Y2VwdGlvbiBlKXtcclxuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIEBPdmVycmlkZVxyXG4gICAgcHVibGljIHZvaWQgc3RvcCgpIHtcclxuICAgICAgICBib3NzR3JvdXAuc2h1dGRvd25HcmFjZWZ1bGx5KCk7XHJcbiAgICAgICAgd29ya2VyR3JvdXAuc2h1dGRvd25HcmFjZWZ1bGx5KCk7XHJcbiAgICAgICAgc2VydmVyQ2hhbm5lbC5jbG9zZSgpO1xyXG4gICAgfVxyXG59XHJcbui/meS9nOS4uuS4gOS4quaJi+WGmXJlZGlz55qE5Yid5aeL5YyW5YaF5a65IOS9oOiupOS4uui2s+Wkn+S6huWQlyIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJwYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXI7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbXBvcnQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcDtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbDtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEluaXRpYWxpemVyO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsUGlwZWxpbmU7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImltcG9ydCBpby5uZXR0eS5jaGFubmVsLkV2ZW50TG9vcEdyb3VwO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5uaW8uTmlvRXZlbnRMb29wR3JvdXA7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5Tb2NrZXRDaGFubmVsO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5zb2NrZXQubmlvLk5pb1NlcnZlclNvY2tldENoYW5uZWw7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImltcG9ydCBpby5uZXR0eS5oYW5kbGVyLmNvZGVjLnN0cmluZy5TdHJpbmdEZWNvZGVyO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbXBvcnQgaW8ubmV0dHkuaGFuZGxlci5jb2RlYy5zdHJpbmcuU3RyaW5nRW5jb2RlcjtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiaW1wb3J0IHNpdGUuaG5meS5zZXJ2ZXIuaGFuZGxlci5TdHJpbmdIYW5kbGVyO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoicHVibGljIGNsYXNzIFJlZGlzTWluaVNlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcHJpdmF0ZSBTdHJpbmcgaG9zdDtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHByaXZhdGUgaW50IHBvcnQ7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcHJpdmF0ZSBFdmVudExvb3BHcm91cCBib3NzR3JvdXA7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIHdvcmtlckdyb3VwO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHByaXZhdGUgQ2hhbm5lbCBzZXJ2ZXJDaGFubmVsO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHB1YmxpYyBSZWRpc01pbmlTZXJ2ZXIoU3RyaW5nIGhvc3QsIGludCBwb3J0KSB7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICB0aGlzLnBvcnQgPSBwb3J0O1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgIHRoaXMuYm9zc0dyb3VwID0gbmV3IE5pb0V2ZW50TG9vcEdyb3VwKDEpO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgIHRoaXMud29ya2VyR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoUnVudGltZS5nZXRSdW50aW1lKCkuYXZhaWxhYmxlUHJvY2Vzc29ycygpICoyKTtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIH1cciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIEBPdmVycmlkZVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcHVibGljIHZvaWQgc3RhcnQoKSB7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgIC5jaGFubmVsKE5pb1NlcnZlclNvY2tldENoYW5uZWwuY2xhc3MpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAuY2hpbGRIYW5kbGVyKG5ldyBDaGFubmVsSW5pdGlhbGl6ZXI8U29ja2V0Q2hhbm5lbD4oKSB7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgaW5pdENoYW5uZWwoU29ja2V0Q2hhbm5lbCBjaCkgdGhyb3dzIEV4Y2VwdGlvbiB7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgICAgICAgIENoYW5uZWxQaXBlbGluZSBwaXBlbGluZSA9IGNoLnBpcGVsaW5lKCk7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0hhbmRsZXIoKSk7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0VuY29kZXIoKSk7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgICAgfVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgfSk7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgdHJ5e1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICBzZXJ2ZXJDaGFubmVsID0gc2VydmVyQm9vdHN0cmFwLmJpbmQoaG9zdCwgcG9ydCkuc3luYygpLmNoYW5uZWwoKTtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiUmVkaXMgc2VydmVyIHN0YXJ0ZWQgYXQgXCIgKyBob3N0ICsgXCI6XCIgKyBwb3J0KTtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICB9Y2F0Y2goSW50ZXJydXB0ZWRFeGNlcHRpb24gZSl7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgfVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIH1cciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBAT3ZlcnJpZGVcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHB1YmxpYyB2b2lkIHN0b3AoKSB7XHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgYm9zc0dyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgIHdvcmtlckdyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgIHNlcnZlckNoYW5uZWwuY2xvc2UoKTtcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIH1cciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoifVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiLov5nkvZzkuLrkuIDkuKrmiYvlhplyZWRpc+eahOWIneWni+WMluWGheWuuSDkvaDorqTkuLrotrPlpJ/kuoblkJcifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUR3dzI1WGtNdUdiaG1zM1F5cmFFVFYiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIkZpbmQgdGhlIFJlZGlzU2VydmVyIGludGVyZmFjZSB0aGF0IFJlZGlzTWluaVNlcnZlciBpbXBsZW1lbnRzIGFuZCBhbnkgcmVsYXRlZCBjbGFzc2VzIGxpa2UgU3RyaW5nSGFuZGxlci4gQWxzbyBsb29rIGZvciBhbnkgUmVkaXMgcHJvdG9jb2wgaW1wbGVtZW50YXRpb24gZGV0YWlscyBpbiB0aGUgY29kZWJhc2UuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSdsbCBoZWxwIHlvdSBldmFsdWF0ZSB0aGlzIFJlZGlzIHNlcnZlciBpbXBsZW1lbnRhdGlvbiBhbmQgc3VnZ2VzdCBpbXByb3ZlbWVudHMuIEZpcnN0LCBsZXQgbWUgZ2F0aGVyIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvZGViYXNlIHRvIHVuZGVyc3RhbmQgdGhlIGNvbnRleHQgYmV0dGVyLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJwYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXI7XHJcblxyXG5pbXBvcnQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcDtcclxuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbDtcclxuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEluaXRpYWxpemVyO1xyXG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsUGlwZWxpbmU7XHJcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkV2ZW50TG9vcEdyb3VwO1xyXG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5uaW8uTmlvRXZlbnRMb29wR3JvdXA7XHJcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5Tb2NrZXRDaGFubmVsO1xyXG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5zb2NrZXQubmlvLk5pb1NlcnZlclNvY2tldENoYW5uZWw7XHJcbmltcG9ydCBpby5uZXR0eS5oYW5kbGVyLmNvZGVjLnN0cmluZy5TdHJpbmdEZWNvZGVyO1xyXG5pbXBvcnQgaW8ubmV0dHkuaGFuZGxlci5jb2RlYy5zdHJpbmcuU3RyaW5nRW5jb2RlcjtcclxuaW1wb3J0IHNpdGUuaG5meS5zZXJ2ZXIuaGFuZGxlci5TdHJpbmdIYW5kbGVyO1xyXG5cclxucHVibGljIGNsYXNzIFJlZGlzTWluaVNlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xyXG4gICAgcHJpdmF0ZSBTdHJpbmcgaG9zdDtcclxuICAgIHByaXZhdGUgaW50IHBvcnQ7XHJcblxyXG4gICAgcHJpdmF0ZSBFdmVudExvb3BHcm91cCBib3NzR3JvdXA7XHJcbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIHdvcmtlckdyb3VwO1xyXG5cclxuICAgIHByaXZhdGUgQ2hhbm5lbCBzZXJ2ZXJDaGFubmVsO1xyXG5cclxuICAgIHB1YmxpYyBSZWRpc01pbmlTZXJ2ZXIoU3RyaW5nIGhvc3QsIGludCBwb3J0KSB7XHJcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcclxuICAgICAgICB0aGlzLnBvcnQgPSBwb3J0O1xyXG4gICAgICAgIHRoaXMuYm9zc0dyb3VwID0gbmV3IE5pb0V2ZW50TG9vcEdyb3VwKDEpO1xyXG4gICAgICAgIHRoaXMud29ya2VyR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoUnVudGltZS5nZXRSdW50aW1lKCkuYXZhaWxhYmxlUHJvY2Vzc29ycygpICoyKTtcclxuICAgIH1cclxuICAgIEBPdmVycmlkZVxyXG4gICAgcHVibGljIHZvaWQgc3RhcnQoKSB7XHJcbiAgICAgICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcclxuICAgICAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcclxuICAgICAgICAgICAgICAgIC5jaGFubmVsKE5pb1NlcnZlclNvY2tldENoYW5uZWwuY2xhc3MpXHJcbiAgICAgICAgICAgICAgICAuY2hpbGRIYW5kbGVyKG5ldyBDaGFubmVsSW5pdGlhbGl6ZXI8U29ja2V0Q2hhbm5lbD4oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgaW5pdENoYW5uZWwoU29ja2V0Q2hhbm5lbCBjaCkgdGhyb3dzIEV4Y2VwdGlvbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENoYW5uZWxQaXBlbGluZSBwaXBlbGluZSA9IGNoLnBpcGVsaW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0hhbmRsZXIoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0VuY29kZXIoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBzZXJ2ZXJDaGFubmVsID0gc2VydmVyQm9vdHN0cmFwLmJpbmQoaG9zdCwgcG9ydCkuc3luYygpLmNoYW5uZWwoKTtcclxuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiUmVkaXMgc2VydmVyIHN0YXJ0ZWQgYXQgXCIgKyBob3N0ICsgXCI6XCIgKyBwb3J0KTtcclxuICAgICAgICB9Y2F0Y2goSW50ZXJydXB0ZWRFeGNlcHRpb24gZSl7XHJcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBAT3ZlcnJpZGVcclxuICAgIHB1YmxpYyB2b2lkIHN0b3AoKSB7XHJcbiAgICAgICAgYm9zc0dyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xyXG4gICAgICAgIHdvcmtlckdyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xyXG4gICAgICAgIHNlcnZlckNoYW5uZWwuY2xvc2UoKTtcclxuICAgIH1cclxufVxyXG7ov5nkvZzkuLrkuIDkuKrmiYvlhplyZWRpc+eahOWIneWni+WMluWGheWuuSDkvaDorqTkuLrotrPlpJ/kuoblkJcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJGOi9taW5pUmVkaXMiLCJmb2xkZXJSb290IjoiRjovbWluaVJlZGlzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQyMDowOToyNi44MzlaIiwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgZXZhbHVhdGUgdGhpcyBSZWRpcyBzZXJ2ZXIgaW1wbGVtZW50YXRpb24gYW5kIHN1Z2dlc3QgaW1wcm92ZW1lbnRzLiBGaXJzdCwgbGV0IG1lIGdhdGhlciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb2RlYmFzZSB0byB1bmRlcnN0YW5kIHRoZSBjb250ZXh0IGJldHRlci5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhZjkyMzU2Ni03N2Y3LTQxMzgtYmJkZS05ZDYzMmU5Nzc3YzAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE0a2hwbUFBdkhFNTZSZWhBRUQ5SjZ0IiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJGaW5kIHRoZSBTdHJpbmdIYW5kbGVyIGNsYXNzIGluIHNpdGUuaG5meS5zZXJ2ZXIuaGFuZGxlciBwYWNrYWdlIGFuZCBhbnkgUmVkaXMgcHJvdG9jb2wgaW1wbGVtZW50YXRpb24gZGV0YWlscyBpbiB0aGUgc2l0ZS5obmZ5IHBhY2thZ2UuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93LCBsZXQgbWUgbG9vayBmb3IgdGhlIFN0cmluZ0hhbmRsZXIgaW1wbGVtZW50YXRpb24gaW4geW91ciBwYWNrYWdlIHN0cnVjdHVyZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyO1xuXG5pbXBvcnQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWw7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5pdGlhbGl6ZXI7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsUGlwZWxpbmU7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLm5pby5OaW9FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5Tb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0Lm5pby5OaW9TZXJ2ZXJTb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0RlY29kZXI7XG5pbXBvcnQgaW8ubmV0dHkuaGFuZGxlci5jb2RlYy5zdHJpbmcuU3RyaW5nRW5jb2RlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLmhhbmRsZXIuU3RyaW5nSGFuZGxlcjtcblxucHVibGljIGNsYXNzIG1pbmlSZWRpc1NlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xuXG4gICAgcHJpdmF0ZSBTdHJpbmcgaG9zdDtcbiAgICBwcml2YXRlIGludCBwb3J0O1xuXG4gICAgcHJpdmF0ZSBDaGFubmVsIHNlcnZlckNoYW5uZWw7XG5cbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIGJvc3NHcm91cDtcbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIHdvcmtlckdyb3VwO1xuXG4gICAgcHVibGljIG1pbmlSZWRpc1NlcnZlcihTdHJpbmcgaG9zdCwgaW50IHBvcnQpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5ib3NzR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoMSk7XG4gICAgICAgIHRoaXMud29ya2VyR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoNCk7XG4gICAgfVxuXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBzdGFydCgpIHtcbiAgICAgICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcblxuICAgICAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcbiAgICAgICAgICAgICAgICAuY2hhbm5lbChOaW9TZXJ2ZXJTb2NrZXRDaGFubmVsLmNsYXNzKVxuICAgICAgICAgICAgICAgIC5jaGlsZEhhbmRsZXIobmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcbiAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGluaXRDaGFubmVsKFNvY2tldENoYW5uZWwgY2gpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdIYW5kbGVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRW5jb2RlcigpKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBzZXJ2ZXJDaGFubmVsID0gc2VydmVyQm9vdHN0cmFwLmJpbmQoaG9zdCwgcG9ydCkuc3luYygpLmNoYW5uZWwoKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIlJlZGlzIHNlcnZlciBzdGFydGVkIGF0IFwiICsgaG9zdCArIFwiOlwiICsgcG9ydCk7XG4gICAgICAgIH1jYXRjaChJbnRlcnJ1cHRlZEV4Y2VwdGlvbiBlKXtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgc3RvcCgpIHtcbiAgICAgICAgYm9zc0dyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xuICAgICAgICB3b3JrZXJHcm91cC5zaHV0ZG93bkdyYWNlZnVsbHkoKTtcbiAgICAgICAgc2VydmVyQ2hhbm5lbC5jbG9zZSgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL1JlZGlzTWluaVNlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXI7XG5cbnB1YmxpYyBjbGFzcyBSZWRpc01pbmlTZXJ2ZXIge1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9sYXVuY2hlci9SZWRpc1NlcnZlckxhdW5jaGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LmxhdW5jaGVyO1xuXG5pbXBvcnQgc2l0ZS5obmZ5MjU4LnNlcnZlci5SZWRpc1NlcnZlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLm1pbmlSZWRpc1NlcnZlcjtcblxucHVibGljIGNsYXNzIFJlZGlzU2VydmVyTGF1bmNoZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiAgICAgICAgUmVkaXNTZXJ2ZXIgcmVkaXNTZXJ2ZXIgPSBuZXcgbWluaVJlZGlzU2VydmVyKFwibG9jYWxob3N0XCIsIDYzNzkpO1xuICAgICAgICByZWRpc1NlcnZlci5zdGFydCgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL1JlZGlzU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5LnNlcnZlcjtcblxucHVibGljIGludGVyZmFjZSBSZWRpc1NlcnZlciB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9SZWRpc1NlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5zZXJ2ZXI7XG5cbnB1YmxpYyBpbnRlcmZhY2UgUmVkaXNTZXJ2ZXJ7XG4gICAgdm9pZCBzdGFydCgpO1xuICAgIHZvaWQgc3RvcCgpO1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvaGFuZGxlci9TdHJpbmdIYW5kbGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlci5oYW5kbGVyO1xuXG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSGFuZGxlckNvbnRleHQ7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5ib3VuZEhhbmRsZXJBZGFwdGVyO1xuaW1wb3J0IHNpdGUuaG5meTI1OC5yZXNwLlNpbXBsZVN0cmluZztcblxucHVibGljIGNsYXNzIFN0cmluZ0hhbmRsZXIgZXh0ZW5kcyBDaGFubmVsSW5ib3VuZEhhbmRsZXJBZGFwdGVyIHtcbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBjaGFubmVsUmVhZChDaGFubmVsSGFuZGxlckNvbnRleHQgY3R4LCBPYmplY3QgbXNnKSB0aHJvd3MgRXhjZXB0aW9ue1xuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCLmjqXmlLbliLByZWRpc+a2iOaBrzogXCIgKyBtc2cpO1xuXG4gICAgICAgIGN0eC5jaGFubmVsKCkud3JpdGVBbmRGbHVzaChTaW1wbGVTdHJpbmcuT0sudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgY2hhbm5lbEFjdGl2ZShDaGFubmVsSGFuZGxlckNvbnRleHQgY3R4KXtcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwi5a6i5oi356uv6L+e5o6l5oiQ5YqfXCIpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIGV4Y2VwdGlvbkNhdWdodChDaGFubmVsSGFuZGxlckNvbnRleHQgY3R4LCBUaHJvd2FibGUgY2F1c2UpIHRocm93cyBFeGNlcHRpb257XG4gICAgICAgIGNhdXNlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICBjdHguY2xvc2UoKTtcbiAgICB9XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvU2ltcGxlU3RyaW5nLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbmltcG9ydCBpby5uZXR0eS5idWZmZXIuQnl0ZUJ1ZjtcbmltcG9ydCBsb21ib2suR2V0dGVyO1xuaW1wb3J0IGxvbWJvay5TZXR0ZXI7XG5cbkBHZXR0ZXJcbkBTZXR0ZXJcbnB1YmxpYyBjbGFzcyBTaW1wbGVTdHJpbmcgZXh0ZW5kcyBSZXNwe1xuICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU2ltcGxlU3RyaW5nIE9LID0gbmV3IFNpbXBsZVN0cmluZyhcIk9LXCIpO1xuICAgIHByaXZhdGUgZmluYWwgU3RyaW5nIHZhbHVlO1xuXG4gICAgcHVibGljIFNpbXBsZVN0cmluZyhTdHJpbmcgdmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB2b2lkIGVuY29kZShSZXNwIHJlc3AsIEJ5dGVCdWYgYnl0ZUJ1Zil7XG4gICAgICAgIGJ5dGVCdWYud3JpdGVCeXRlcyhuZXcgYnl0ZVsnKyddKTtcbiAgICAgICAgYnl0ZUJ1Zi53cml0ZUJ5dGVzKHZhbHVlLmdldEJ5dGVzKCkpO1xuICAgICAgICBieXRlQnVmLndyaXRlQnl0ZXMoQ1JMRik7XG4gICAgfVxufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1Jlc3AuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxuaW1wb3J0IGlvLm5ldHR5LmJ1ZmZlci5CeXRlQnVmO1xuXG5wdWJsaWMgYWJzdHJhY3QgY2xhc3MgUmVzcCB7XG4gICAgcHVibGljIHN0YXRpYyBmaW5hbCBieXRlW10gQ1JMRiA9IHsnXFxyJywgJ1xcbid9O1xuXG4vLyAgICBwdWJsaWMgYWJzdHJhY3Qgdm9pZCBlbmNvZGUoUmVzcCByZXNwLCBCeXRlQnVmIGJ5dGVCdWYpO1xuXG4gICAgcHVibGljIFN0cmluZyB0b1N0cmluZygpe1xuICAgICAgICByZXR1cm4gXCIrT0tcXHJcXG5cIjtcbiAgICB9XG5cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL2hhbmRsZXIvU3RyaW5nSGFuZGxlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXIuaGFuZGxlcjtcblxucHVibGljIGNsYXNzIFN0cmluZ0hhbmRsZXIge1xufVxuLi4uXG5QYXRoOiBwb20ueG1sXG48P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cbjxwcm9qZWN0IHhtbG5zPVwiaHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4wXCJcbiAgICAgICAgIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCJcbiAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj1cImh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMCBodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy94c2QvbWF2ZW4tNC4wLjAueHNkXCI+XG4gICAgPG1vZGVsVmVyc2lvbj40LjAuMDwvbW9kZWxWZXJzaW9uPlxuXG4gICAgPGdyb3VwSWQ+c2l0ZS5obmZ5MjU4PC9ncm91cElkPlxuICAgIDxhcnRpZmFjdElkPm1pbmlSZWRpczwvYXJ0aWZhY3RJZD5cbiAgICA8dmVyc2lvbj4xLjAtU05BUFNIT1Q8L3ZlcnNpb24+XG5cbiAgICA8cHJvcGVydGllcz5cbiAgICAgICAgPG1hdmVuLmNvbXBpbGVyLnNvdXJjZT44PC9tYXZlbi5jb21waWxlci5zb3VyY2U+XG4gICAgICAgIDxtYXZlbi5jb21waWxlci50YXJnZXQ+ODwvbWF2ZW4uY29tcGlsZXIudGFyZ2V0PlxuICAgICAgICA8cHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5VVEYtODwvcHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5cbiAgICA8L3Byb3BlcnRpZXM+XG5cbiAgICA8ZGVwZW5kZW5jaWVzPlxuPCEtLSAgICAgICAgbmV0dHnnu4Tku7YtLT5cbiAgICAgICAgPGRlcGVuZGVuY3k+XG4gICAgICAgICAgICA8Z3JvdXBJZD5pby5uZXR0eTwvZ3JvdXBJZD5cbiAgICAgICAgICAgIDxhcnRpZmFjdElkPm5ldHR5LWFsbDwvYXJ0aWZhY3RJZD5cbiAgICAgICAgICAgIDx2ZXJzaW9uPjQuMS41MS5GaW5hbDwvdmVyc2lvbj5cbiAgICAgICAgPC9kZXBlbmRlbmN5PlxuXG48IS0tICAgICAgICBsb21ib2stLT5cblxuICAgICAgICA8ZGVwZW5kZW5jeT5cbiAgICAgICAgICAgIDxncm91cElkPm9yZy5wcm9qZWN0bG9tYm9rPC9ncm91cElkPlxuICAgICAgICAgICAgPGFydGlmYWN0SWQ+bG9tYm9rPC9hcnRpZmFjdElkPlxuICAgICAgICAgICAgPHZlcnNpb24+MS4xOC4yMDwvdmVyc2lvbj5cbiAgICAgICAgPC9kZXBlbmRlbmN5PlxuICAgIDwvZGVwZW5kZW5jaWVzPlxuXG5cblxuXG48L3Byb2plY3Q+Li4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1Jlc3BJbnRlZ2VyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbnB1YmxpYyBjbGFzcyBSZXNwSW50ZWdlciBleHRlbmRzIFJlc3Age1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meS9sYXVuY2hlci9TZXJ2ZXJMYXVuY2hlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5sYXVuY2hlcjtcblxucHVibGljIGNsYXNzIFNlcnZlckxhdW5jaGVyIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvcmVzcC9FcnJvcnMuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxucHVibGljIGNsYXNzIEVycm9ycyBleHRlbmRzIFJlc3B7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvUmVzcEFycmF5LmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbnB1YmxpYyBjbGFzcyBSZXNwQXJyYXkgZXh0ZW5kcyBSZXNwe1xufVxuLi4uXG5QYXRoOiAuZ2l0aWdub3JlXG50YXJnZXQvXG4hLm12bi93cmFwcGVyL21hdmVuLXdyYXBwZXIuamFyXG4hKiovc3JjL21haW4vKiovdGFyZ2V0L1xuISoqL3NyYy90ZXN0LyoqL3RhcmdldC9cblxuIyMjIEludGVsbGlKIElERUEgIyMjXG4uaWRlYS9tb2R1bGVzLnhtbFxuLmlkZWEvamFyUmVwb3NpdG9yaWVzLnhtbFxuLmlkZWEvY29tcGlsZXIueG1sXG4uaWRlYS9saWJyYXJpZXMvXG4qLml3c1xuKi5pbWxcbiouaXByXG5cbiMjIyBFY2xpcHNlICMjI1xuLmFwdF9nZW5lcmF0ZWRcbi5jbGFzc3BhdGhcbi5mYWN0b3J5cGF0aFxuLnByb2plY3Rcbi5zZXR0aW5nc1xuLnNwcmluZ0JlYW5zXG4uc3RzNC1jYWNoZVxuXG4jIyMgTmV0QmVhbnMgIyMjXG4vbmJwcm9qZWN0L3ByaXZhdGUvXG4vbmJidWlsZC9cbi9kaXN0L1xuL25iZGlzdC9cbi8ubmItZ3JhZGxlL1xuYnVpbGQvXG4hKiovc3JjL21haW4vKiovYnVpbGQvXG4hKiovc3JjL3Rlc3QvKiovYnVpbGQvXG5cbiMjIyBWUyBDb2RlICMjI1xuLnZzY29kZS9cblxuIyMjIE1hYyBPUyAjIyNcbi5EU19TdG9yZS4uLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRHd3MjVYa011R2JobXMzUXlyYUVUViJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkY6L21pbmlSZWRpcyIsImZvbGRlclJvb3QiOiJGOi9taW5pUmVkaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTA4VDIwOjA5OjM0LjM3M1oiLCJyZXNwb25zZV90ZXh0IjoiTm93LCBsZXQgbWUgbG9vayBmb3IgdGhlIFN0cmluZ0hhbmRsZXIgaW1wbGVtZW50YXRpb24gaW4geW91ciBwYWNrYWdlIHN0cnVjdHVyZTpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIzMTYyYmEwYy03MzBkLTRlMjEtYjdlNi00MmE0OWZlYTI1YTMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE2ZWlSa1FYMnpHM1Zqd043SjhNdE5ZIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJGaW5kIHRoZSBSZWRpc1NlcnZlciBpbnRlcmZhY2UgaW4gc2l0ZS5obmZ5LnNlcnZlciBwYWNrYWdlIGFuZCBhbnkgaW1wbGVtZW50YXRpb24gb2YgUmVkaXMgcHJvdG9jb2wgaGFuZGxlcnMgb3IgZGVjb2RlcnMgaW4gdGhlIHNpdGUuaG5meSBwYWNrYWdlLlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSBjaGVjayBpZiB0aGVyZSdzIGEgcHJvcGVyIGltcGxlbWVudGF0aW9uIG9mIHRoZSBSZWRpc1NlcnZlciBpbnRlcmZhY2UgaW4geW91ciBwYWNrYWdlIHN0cnVjdHVyZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9oYW5kbGVyL1N0cmluZ0hhbmRsZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyLmhhbmRsZXI7XG5cbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxIYW5kbGVyQ29udGV4dDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWxJbmJvdW5kSGFuZGxlckFkYXB0ZXI7XG5pbXBvcnQgc2l0ZS5obmZ5MjU4LnJlc3AuU2ltcGxlU3RyaW5nO1xuXG5wdWJsaWMgY2xhc3MgU3RyaW5nSGFuZGxlciBleHRlbmRzIENoYW5uZWxJbmJvdW5kSGFuZGxlckFkYXB0ZXIge1xuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIGNoYW5uZWxSZWFkKENoYW5uZWxIYW5kbGVyQ29udGV4dCBjdHgsIE9iamVjdCBtc2cpIHRocm93cyBFeGNlcHRpb257XG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIuaOpeaUtuWIsHJlZGlz5raI5oGvOiBcIiArIG1zZyk7XG5cbiAgICAgICAgY3R4LmNoYW5uZWwoKS53cml0ZUFuZEZsdXNoKFNpbXBsZVN0cmluZy5PSy50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBjaGFubmVsQWN0aXZlKENoYW5uZWxIYW5kbGVyQ29udGV4dCBjdHgpe1xuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCLlrqLmiLfnq6/ov57mjqXmiJDlip9cIik7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgZXhjZXB0aW9uQ2F1Z2h0KENoYW5uZWxIYW5kbGVyQ29udGV4dCBjdHgsIFRocm93YWJsZSBjYXVzZSkgdGhyb3dzIEV4Y2VwdGlvbntcbiAgICAgICAgY2F1c2UucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIGN0eC5jbG9zZSgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL2hhbmRsZXIvU3RyaW5nSGFuZGxlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXIuaGFuZGxlcjtcblxucHVibGljIGNsYXNzIFN0cmluZ0hhbmRsZXIge1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvbWluaVJlZGlzU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlcjtcblxuaW1wb3J0IGlvLm5ldHR5LmJvb3RzdHJhcC5TZXJ2ZXJCb290c3RyYXA7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEluaXRpYWxpemVyO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbFBpcGVsaW5lO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuRXZlbnRMb29wR3JvdXA7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5uaW8uTmlvRXZlbnRMb29wR3JvdXA7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5zb2NrZXQuU29ja2V0Q2hhbm5lbDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5uaW8uTmlvU2VydmVyU29ja2V0Q2hhbm5lbDtcbmltcG9ydCBpby5uZXR0eS5oYW5kbGVyLmNvZGVjLnN0cmluZy5TdHJpbmdEZWNvZGVyO1xuaW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0VuY29kZXI7XG5pbXBvcnQgc2l0ZS5obmZ5MjU4LnNlcnZlci5oYW5kbGVyLlN0cmluZ0hhbmRsZXI7XG5cbnB1YmxpYyBjbGFzcyBtaW5pUmVkaXNTZXJ2ZXIgaW1wbGVtZW50cyBSZWRpc1NlcnZlcntcblxuICAgIHByaXZhdGUgU3RyaW5nIGhvc3Q7XG4gICAgcHJpdmF0ZSBpbnQgcG9ydDtcblxuICAgIHByaXZhdGUgQ2hhbm5lbCBzZXJ2ZXJDaGFubmVsO1xuXG4gICAgcHJpdmF0ZSBFdmVudExvb3BHcm91cCBib3NzR3JvdXA7XG4gICAgcHJpdmF0ZSBFdmVudExvb3BHcm91cCB3b3JrZXJHcm91cDtcblxuICAgIHB1YmxpYyBtaW5pUmVkaXNTZXJ2ZXIoU3RyaW5nIGhvc3QsIGludCBwb3J0KSB7XG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICAgIHRoaXMuYm9zc0dyb3VwID0gbmV3IE5pb0V2ZW50TG9vcEdyb3VwKDEpO1xuICAgICAgICB0aGlzLndvcmtlckdyb3VwID0gbmV3IE5pb0V2ZW50TG9vcEdyb3VwKDQpO1xuICAgIH1cblxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgc3RhcnQoKSB7XG4gICAgICAgIFNlcnZlckJvb3RzdHJhcCBzZXJ2ZXJCb290c3RyYXAgPSBuZXcgU2VydmVyQm9vdHN0cmFwKCk7XG5cbiAgICAgICAgc2VydmVyQm9vdHN0cmFwLmdyb3VwKGJvc3NHcm91cCwgd29ya2VyR3JvdXApXG4gICAgICAgICAgICAgICAgLmNoYW5uZWwoTmlvU2VydmVyU29ja2V0Q2hhbm5lbC5jbGFzcylcbiAgICAgICAgICAgICAgICAuY2hpbGRIYW5kbGVyKG5ldyBDaGFubmVsSW5pdGlhbGl6ZXI8U29ja2V0Q2hhbm5lbD4oKSB7XG4gICAgICAgICAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBpbml0Q2hhbm5lbChTb2NrZXRDaGFubmVsIGNoKSB0aHJvd3MgRXhjZXB0aW9uIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENoYW5uZWxQaXBlbGluZSBwaXBlbGluZSA9IGNoLnBpcGVsaW5lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdEZWNvZGVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nSGFuZGxlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0VuY29kZXIoKSk7XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgc2VydmVyQ2hhbm5lbCA9IHNlcnZlckJvb3RzdHJhcC5iaW5kKGhvc3QsIHBvcnQpLnN5bmMoKS5jaGFubmVsKCk7XG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJSZWRpcyBzZXJ2ZXIgc3RhcnRlZCBhdCBcIiArIGhvc3QgKyBcIjpcIiArIHBvcnQpO1xuICAgICAgICB9Y2F0Y2goSW50ZXJydXB0ZWRFeGNlcHRpb24gZSl7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIHN0b3AoKSB7XG4gICAgICAgIGJvc3NHcm91cC5zaHV0ZG93bkdyYWNlZnVsbHkoKTtcbiAgICAgICAgd29ya2VyR3JvdXAuc2h1dGRvd25HcmFjZWZ1bGx5KCk7XG4gICAgICAgIHNlcnZlckNoYW5uZWwuY2xvc2UoKTtcbiAgICB9XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvU2ltcGxlU3RyaW5nLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbmltcG9ydCBpby5uZXR0eS5idWZmZXIuQnl0ZUJ1ZjtcbmltcG9ydCBsb21ib2suR2V0dGVyO1xuaW1wb3J0IGxvbWJvay5TZXR0ZXI7XG5cbkBHZXR0ZXJcbkBTZXR0ZXJcbnB1YmxpYyBjbGFzcyBTaW1wbGVTdHJpbmcgZXh0ZW5kcyBSZXNwe1xuICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU2ltcGxlU3RyaW5nIE9LID0gbmV3IFNpbXBsZVN0cmluZyhcIk9LXCIpO1xuICAgIHByaXZhdGUgZmluYWwgU3RyaW5nIHZhbHVlO1xuXG4gICAgcHVibGljIFNpbXBsZVN0cmluZyhTdHJpbmcgdmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB2b2lkIGVuY29kZShSZXNwIHJlc3AsIEJ5dGVCdWYgYnl0ZUJ1Zil7XG4gICAgICAgIGJ5dGVCdWYud3JpdGVCeXRlcyhuZXcgYnl0ZVsnKyddKTtcbiAgICAgICAgYnl0ZUJ1Zi53cml0ZUJ5dGVzKHZhbHVlLmdldEJ5dGVzKCkpO1xuICAgICAgICBieXRlQnVmLndyaXRlQnl0ZXMoQ1JMRik7XG4gICAgfVxufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meS9zZXJ2ZXIvUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkuc2VydmVyO1xuXG5wdWJsaWMgaW50ZXJmYWNlIFJlZGlzU2VydmVyIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL1JlZGlzU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlcjtcblxucHVibGljIGludGVyZmFjZSBSZWRpc1NlcnZlcntcbiAgICB2b2lkIHN0YXJ0KCk7XG4gICAgdm9pZCBzdG9wKCk7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvUmVzcC5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5yZXNwO1xuXG5pbXBvcnQgaW8ubmV0dHkuYnVmZmVyLkJ5dGVCdWY7XG5cbnB1YmxpYyBhYnN0cmFjdCBjbGFzcyBSZXNwIHtcbiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGJ5dGVbXSBDUkxGID0geydcXHInLCAnXFxuJ307XG5cbi8vICAgIHB1YmxpYyBhYnN0cmFjdCB2b2lkIGVuY29kZShSZXNwIHJlc3AsIEJ5dGVCdWYgYnl0ZUJ1Zik7XG5cbiAgICBwdWJsaWMgU3RyaW5nIHRvU3RyaW5nKCl7XG4gICAgICAgIHJldHVybiBcIitPS1xcclxcblwiO1xuICAgIH1cblxufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meS9zZXJ2ZXIvUmVkaXNNaW5pU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5LnNlcnZlcjtcblxucHVibGljIGNsYXNzIFJlZGlzTWluaVNlcnZlciB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L2xhdW5jaGVyL1JlZGlzU2VydmVyTGF1bmNoZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgubGF1bmNoZXI7XG5cbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLlJlZGlzU2VydmVyO1xuaW1wb3J0IHNpdGUuaG5meTI1OC5zZXJ2ZXIubWluaVJlZGlzU2VydmVyO1xuXG5wdWJsaWMgY2xhc3MgUmVkaXNTZXJ2ZXJMYXVuY2hlciB7XG4gICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuICAgICAgICBSZWRpc1NlcnZlciByZWRpc1NlcnZlciA9IG5ldyBtaW5pUmVkaXNTZXJ2ZXIoXCJsb2NhbGhvc3RcIiwgNjM3OSk7XG4gICAgICAgIHJlZGlzU2VydmVyLnN0YXJ0KCk7XG4gICAgfVxufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1Jlc3BJbnRlZ2VyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbnB1YmxpYyBjbGFzcyBSZXNwSW50ZWdlciBleHRlbmRzIFJlc3Age1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1Jlc3BBcnJheS5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5yZXNwO1xuXG5wdWJsaWMgY2xhc3MgUmVzcEFycmF5IGV4dGVuZHMgUmVzcHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvcmVzcC9FcnJvcnMuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxucHVibGljIGNsYXNzIEVycm9ycyBleHRlbmRzIFJlc3B7XG59XG4uLi5cblBhdGg6IHBvbS54bWxcbjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PlxuPHByb2plY3QgeG1sbnM9XCJodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy9QT00vNC4wLjBcIlxuICAgICAgICAgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIlxuICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPVwiaHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4wIGh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL3hzZC9tYXZlbi00LjAuMC54c2RcIj5cbiAgICA8bW9kZWxWZXJzaW9uPjQuMC4wPC9tb2RlbFZlcnNpb24+XG5cbiAgICA8Z3JvdXBJZD5zaXRlLmhuZnkyNTg8L2dyb3VwSWQ+XG4gICAgPGFydGlmYWN0SWQ+bWluaVJlZGlzPC9hcnRpZmFjdElkPlxuICAgIDx2ZXJzaW9uPjEuMC1TTkFQU0hPVDwvdmVyc2lvbj5cblxuICAgIDxwcm9wZXJ0aWVzPlxuICAgICAgICA8bWF2ZW4uY29tcGlsZXIuc291cmNlPjg8L21hdmVuLmNvbXBpbGVyLnNvdXJjZT5cbiAgICAgICAgPG1hdmVuLmNvbXBpbGVyLnRhcmdldD44PC9tYXZlbi5jb21waWxlci50YXJnZXQ+XG4gICAgICAgIDxwcm9qZWN0LmJ1aWxkLnNvdXJjZUVuY29kaW5nPlVURi04PC9wcm9qZWN0LmJ1aWxkLnNvdXJjZUVuY29kaW5nPlxuICAgIDwvcHJvcGVydGllcz5cblxuICAgIDxkZXBlbmRlbmNpZXM+XG48IS0tICAgICAgICBuZXR0eee7hOS7ti0tPlxuICAgICAgICA8ZGVwZW5kZW5jeT5cbiAgICAgICAgICAgIDxncm91cElkPmlvLm5ldHR5PC9ncm91cElkPlxuICAgICAgICAgICAgPGFydGlmYWN0SWQ+bmV0dHktYWxsPC9hcnRpZmFjdElkPlxuICAgICAgICAgICAgPHZlcnNpb24+NC4xLjUxLkZpbmFsPC92ZXJzaW9uPlxuICAgICAgICA8L2RlcGVuZGVuY3k+XG5cbjwhLS0gICAgICAgIGxvbWJvay0tPlxuXG4gICAgICAgIDxkZXBlbmRlbmN5PlxuICAgICAgICAgICAgPGdyb3VwSWQ+b3JnLnByb2plY3Rsb21ib2s8L2dyb3VwSWQ+XG4gICAgICAgICAgICA8YXJ0aWZhY3RJZD5sb21ib2s8L2FydGlmYWN0SWQ+XG4gICAgICAgICAgICA8dmVyc2lvbj4xLjE4LjIwPC92ZXJzaW9uPlxuICAgICAgICA8L2RlcGVuZGVuY3k+XG4gICAgPC9kZXBlbmRlbmNpZXM+XG5cblxuXG5cbjwvcHJvamVjdD4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5L2xhdW5jaGVyL1NlcnZlckxhdW5jaGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5LmxhdW5jaGVyO1xuXG5wdWJsaWMgY2xhc3MgU2VydmVyTGF1bmNoZXIge1xufVxuLi4uXG5QYXRoOiAuZ2l0aWdub3JlXG50YXJnZXQvXG4hLm12bi93cmFwcGVyL21hdmVuLXdyYXBwZXIuamFyXG4hKiovc3JjL21haW4vKiovdGFyZ2V0L1xuISoqL3NyYy90ZXN0LyoqL3RhcmdldC9cblxuIyMjIEludGVsbGlKIElERUEgIyMjXG4uaWRlYS9tb2R1bGVzLnhtbFxuLmlkZWEvamFyUmVwb3NpdG9yaWVzLnhtbFxuLmlkZWEvY29tcGlsZXIueG1sXG4uaWRlYS9saWJyYXJpZXMvXG4qLml3c1xuKi5pbWxcbiouaXByXG5cbiMjIyBFY2xpcHNlICMjI1xuLmFwdF9nZW5lcmF0ZWRcbi5jbGFzc3BhdGhcbi5mYWN0b3J5cGF0aFxuLnByb2plY3Rcbi5zZXR0aW5nc1xuLnNwcmluZ0JlYW5zXG4uc3RzNC1jYWNoZVxuXG4jIyMgTmV0QmVhbnMgIyMjXG4vbmJwcm9qZWN0L3ByaXZhdGUvXG4vbmJidWlsZC9cbi9kaXN0L1xuL25iZGlzdC9cbi8ubmItZ3JhZGxlL1xuYnVpbGQvXG4hKiovc3JjL21haW4vKiovYnVpbGQvXG4hKiovc3JjL3Rlc3QvKiovYnVpbGQvXG5cbiMjIyBWUyBDb2RlICMjI1xuLnZzY29kZS9cblxuIyMjIE1hYyBPUyAjIyNcbi5EU19TdG9yZS4uLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNGtocG1BQXZIRTU2UmVoQUVEOUo2dCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkY6L21pbmlSZWRpcyIsImZvbGRlclJvb3QiOiJGOi9taW5pUmVkaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTA4VDIwOjA5OjQyLjU5OFoiLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIGNoZWNrIGlmIHRoZXJlJ3MgYSBwcm9wZXIgaW1wbGVtZW50YXRpb24gb2YgdGhlIFJlZGlzU2VydmVyIGludGVyZmFjZSBpbiB5b3VyIHBhY2thZ2Ugc3RydWN0dXJlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJmYWlsZWQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W10sInNlZW5fc3RhdGUiOiJ1bnNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meS9zZXJ2ZXIvUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkuc2VydmVyO1xuXG5wdWJsaWMgaW50ZXJmYWNlIFJlZGlzU2VydmVyIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL1JlZGlzU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlcjtcblxucHVibGljIGludGVyZmFjZSBSZWRpc1NlcnZlcntcbiAgICB2b2lkIHN0YXJ0KCk7XG4gICAgdm9pZCBzdG9wKCk7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyO1xuXG5pbXBvcnQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWw7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5pdGlhbGl6ZXI7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsUGlwZWxpbmU7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLm5pby5OaW9FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5Tb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0Lm5pby5OaW9TZXJ2ZXJTb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0RlY29kZXI7XG5pbXBvcnQgaW8ubmV0dHkuaGFuZGxlci5jb2RlYy5zdHJpbmcuU3RyaW5nRW5jb2RlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLmhhbmRsZXIuU3RyaW5nSGFuZGxlcjtcblxucHVibGljIGNsYXNzIG1pbmlSZWRpc1NlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xuXG4gICAgcHJpdmF0ZSBTdHJpbmcgaG9zdDtcbiAgICBwcml2YXRlIGludCBwb3J0O1xuXG4gICAgcHJpdmF0ZSBDaGFubmVsIHNlcnZlckNoYW5uZWw7XG5cbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIGJvc3NHcm91cDtcbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIHdvcmtlckdyb3VwO1xuXG4gICAgcHVibGljIG1pbmlSZWRpc1NlcnZlcihTdHJpbmcgaG9zdCwgaW50IHBvcnQpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5ib3NzR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoMSk7XG4gICAgICAgIHRoaXMud29ya2VyR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoNCk7XG4gICAgfVxuXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBzdGFydCgpIHtcbiAgICAgICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcblxuICAgICAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcbiAgICAgICAgICAgICAgICAuY2hhbm5lbChOaW9TZXJ2ZXJTb2NrZXRDaGFubmVsLmNsYXNzKVxuICAgICAgICAgICAgICAgIC5jaGlsZEhhbmRsZXIobmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcbiAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGluaXRDaGFubmVsKFNvY2tldENoYW5uZWwgY2gpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdIYW5kbGVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRW5jb2RlcigpKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBzZXJ2ZXJDaGFubmVsID0gc2VydmVyQm9vdHN0cmFwLmJpbmQoaG9zdCwgcG9ydCkuc3luYygpLmNoYW5uZWwoKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIlJlZGlzIHNlcnZlciBzdGFydGVkIGF0IFwiICsgaG9zdCArIFwiOlwiICsgcG9ydCk7XG4gICAgICAgIH1jYXRjaChJbnRlcnJ1cHRlZEV4Y2VwdGlvbiBlKXtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgc3RvcCgpIHtcbiAgICAgICAgYm9zc0dyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xuICAgICAgICB3b3JrZXJHcm91cC5zaHV0ZG93bkdyYWNlZnVsbHkoKTtcbiAgICAgICAgc2VydmVyQ2hhbm5lbC5jbG9zZSgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL2hhbmRsZXIvU3RyaW5nSGFuZGxlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5zZXJ2ZXIuaGFuZGxlcjtcblxuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEhhbmRsZXJDb250ZXh0O1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEluYm91bmRIYW5kbGVyQWRhcHRlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTgucmVzcC5TaW1wbGVTdHJpbmc7XG5cbnB1YmxpYyBjbGFzcyBTdHJpbmdIYW5kbGVyIGV4dGVuZHMgQ2hhbm5lbEluYm91bmRIYW5kbGVyQWRhcHRlciB7XG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgY2hhbm5lbFJlYWQoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCwgT2JqZWN0IG1zZykgdGhyb3dzIEV4Y2VwdGlvbntcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwi5o6l5pS25YiwcmVkaXPmtojmga86IFwiICsgbXNnKTtcblxuICAgICAgICBjdHguY2hhbm5lbCgpLndyaXRlQW5kRmx1c2goU2ltcGxlU3RyaW5nLk9LLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIGNoYW5uZWxBY3RpdmUoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCl7XG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIuWuouaIt+err+i/nuaOpeaIkOWKn1wiKTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBleGNlcHRpb25DYXVnaHQoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCwgVGhyb3dhYmxlIGNhdXNlKSB0aHJvd3MgRXhjZXB0aW9ue1xuICAgICAgICBjYXVzZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgY3R4LmNsb3NlKCk7XG4gICAgfVxufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9sYXVuY2hlci9SZWRpc1NlcnZlckxhdW5jaGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LmxhdW5jaGVyO1xuXG5pbXBvcnQgc2l0ZS5obmZ5MjU4LnNlcnZlci5SZWRpc1NlcnZlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLm1pbmlSZWRpc1NlcnZlcjtcblxucHVibGljIGNsYXNzIFJlZGlzU2VydmVyTGF1bmNoZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiAgICAgICAgUmVkaXNTZXJ2ZXIgcmVkaXNTZXJ2ZXIgPSBuZXcgbWluaVJlZGlzU2VydmVyKFwibG9jYWxob3N0XCIsIDYzNzkpO1xuICAgICAgICByZWRpc1NlcnZlci5zdGFydCgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL1JlZGlzTWluaVNlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXI7XG5cbnB1YmxpYyBjbGFzcyBSZWRpc01pbmlTZXJ2ZXIge1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1NpbXBsZVN0cmluZy5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5yZXNwO1xuXG5pbXBvcnQgaW8ubmV0dHkuYnVmZmVyLkJ5dGVCdWY7XG5pbXBvcnQgbG9tYm9rLkdldHRlcjtcbmltcG9ydCBsb21ib2suU2V0dGVyO1xuXG5AR2V0dGVyXG5AU2V0dGVyXG5wdWJsaWMgY2xhc3MgU2ltcGxlU3RyaW5nIGV4dGVuZHMgUmVzcHtcbiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFNpbXBsZVN0cmluZyBPSyA9IG5ldyBTaW1wbGVTdHJpbmcoXCJPS1wiKTtcbiAgICBwcml2YXRlIGZpbmFsIFN0cmluZyB2YWx1ZTtcblxuICAgIHB1YmxpYyBTaW1wbGVTdHJpbmcoU3RyaW5nIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdm9pZCBlbmNvZGUoUmVzcCByZXNwLCBCeXRlQnVmIGJ5dGVCdWYpe1xuICAgICAgICBieXRlQnVmLndyaXRlQnl0ZXMobmV3IGJ5dGVbJysnXSk7XG4gICAgICAgIGJ5dGVCdWYud3JpdGVCeXRlcyh2YWx1ZS5nZXRCeXRlcygpKTtcbiAgICAgICAgYnl0ZUJ1Zi53cml0ZUJ5dGVzKENSTEYpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvcmVzcC9SZXNwLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbmltcG9ydCBpby5uZXR0eS5idWZmZXIuQnl0ZUJ1ZjtcblxucHVibGljIGFic3RyYWN0IGNsYXNzIFJlc3Age1xuICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgYnl0ZVtdIENSTEYgPSB7J1xccicsICdcXG4nfTtcblxuLy8gICAgcHVibGljIGFic3RyYWN0IHZvaWQgZW5jb2RlKFJlc3AgcmVzcCwgQnl0ZUJ1ZiBieXRlQnVmKTtcblxuICAgIHB1YmxpYyBTdHJpbmcgdG9TdHJpbmcoKXtcbiAgICAgICAgcmV0dXJuIFwiK09LXFxyXFxuXCI7XG4gICAgfVxuXG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5L3NlcnZlci9oYW5kbGVyL1N0cmluZ0hhbmRsZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkuc2VydmVyLmhhbmRsZXI7XG5cbnB1YmxpYyBjbGFzcyBTdHJpbmdIYW5kbGVyIHtcbn1cbi4uLlxuUGF0aDogcG9tLnhtbFxuPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+XG48cHJvamVjdCB4bWxucz1cImh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMFwiXG4gICAgICAgICB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZVwiXG4gICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249XCJodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy9QT00vNC4wLjAgaHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZFwiPlxuICAgIDxtb2RlbFZlcnNpb24+NC4wLjA8L21vZGVsVmVyc2lvbj5cblxuICAgIDxncm91cElkPnNpdGUuaG5meTI1ODwvZ3JvdXBJZD5cbiAgICA8YXJ0aWZhY3RJZD5taW5pUmVkaXM8L2FydGlmYWN0SWQ+XG4gICAgPHZlcnNpb24+MS4wLVNOQVBTSE9UPC92ZXJzaW9uPlxuXG4gICAgPHByb3BlcnRpZXM+XG4gICAgICAgIDxtYXZlbi5jb21waWxlci5zb3VyY2U+ODwvbWF2ZW4uY29tcGlsZXIuc291cmNlPlxuICAgICAgICA8bWF2ZW4uY29tcGlsZXIudGFyZ2V0Pjg8L21hdmVuLmNvbXBpbGVyLnRhcmdldD5cbiAgICAgICAgPHByb2plY3QuYnVpbGQuc291cmNlRW5jb2Rpbmc+VVRGLTg8L3Byb2plY3QuYnVpbGQuc291cmNlRW5jb2Rpbmc+XG4gICAgPC9wcm9wZXJ0aWVzPlxuXG4gICAgPGRlcGVuZGVuY2llcz5cbjwhLS0gICAgICAgIG5ldHR557uE5Lu2LS0+XG4gICAgICAgIDxkZXBlbmRlbmN5PlxuICAgICAgICAgICAgPGdyb3VwSWQ+aW8ubmV0dHk8L2dyb3VwSWQ+XG4gICAgICAgICAgICA8YXJ0aWZhY3RJZD5uZXR0eS1hbGw8L2FydGlmYWN0SWQ+XG4gICAgICAgICAgICA8dmVyc2lvbj40LjEuNTEuRmluYWw8L3ZlcnNpb24+XG4gICAgICAgIDwvZGVwZW5kZW5jeT5cblxuPCEtLSAgICAgICAgbG9tYm9rLS0+XG5cbiAgICAgICAgPGRlcGVuZGVuY3k+XG4gICAgICAgICAgICA8Z3JvdXBJZD5vcmcucHJvamVjdGxvbWJvazwvZ3JvdXBJZD5cbiAgICAgICAgICAgIDxhcnRpZmFjdElkPmxvbWJvazwvYXJ0aWZhY3RJZD5cbiAgICAgICAgICAgIDx2ZXJzaW9uPjEuMTguMjA8L3ZlcnNpb24+XG4gICAgICAgIDwvZGVwZW5kZW5jeT5cbiAgICA8L2RlcGVuZGVuY2llcz5cblxuXG5cblxuPC9wcm9qZWN0Pi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvbGF1bmNoZXIvU2VydmVyTGF1bmNoZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkubGF1bmNoZXI7XG5cbnB1YmxpYyBjbGFzcyBTZXJ2ZXJMYXVuY2hlciB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvUmVzcEludGVnZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxucHVibGljIGNsYXNzIFJlc3BJbnRlZ2VyIGV4dGVuZHMgUmVzcCB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvRXJyb3JzLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbnB1YmxpYyBjbGFzcyBFcnJvcnMgZXh0ZW5kcyBSZXNwe1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1Jlc3BBcnJheS5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5yZXNwO1xuXG5wdWJsaWMgY2xhc3MgUmVzcEFycmF5IGV4dGVuZHMgUmVzcHtcbn1cbi4uLlxuUGF0aDogLmdpdGlnbm9yZVxudGFyZ2V0L1xuIS5tdm4vd3JhcHBlci9tYXZlbi13cmFwcGVyLmphclxuISoqL3NyYy9tYWluLyoqL3RhcmdldC9cbiEqKi9zcmMvdGVzdC8qKi90YXJnZXQvXG5cbiMjIyBJbnRlbGxpSiBJREVBICMjI1xuLmlkZWEvbW9kdWxlcy54bWxcbi5pZGVhL2phclJlcG9zaXRvcmllcy54bWxcbi5pZGVhL2NvbXBpbGVyLnhtbFxuLmlkZWEvbGlicmFyaWVzL1xuKi5pd3NcbiouaW1sXG4qLmlwclxuXG4jIyMgRWNsaXBzZSAjIyNcbi5hcHRfZ2VuZXJhdGVkXG4uY2xhc3NwYXRoXG4uZmFjdG9yeXBhdGhcbi5wcm9qZWN0XG4uc2V0dGluZ3Ncbi5zcHJpbmdCZWFuc1xuLnN0czQtY2FjaGVcblxuIyMjIE5ldEJlYW5zICMjI1xuL25icHJvamVjdC9wcml2YXRlL1xuL25iYnVpbGQvXG4vZGlzdC9cbi9uYmRpc3QvXG4vLm5iLWdyYWRsZS9cbmJ1aWxkL1xuISoqL3NyYy9tYWluLyoqL2J1aWxkL1xuISoqL3NyYy90ZXN0LyoqL2J1aWxkL1xuXG4jIyMgVlMgQ29kZSAjIyNcbi52c2NvZGUvXG5cbiMjIyBNYWMgT1MgIyMjXG4uRFNfU3RvcmUuLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTZlaVJrUVgyekczVmp3TjdKOE10TlkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJGOi9taW5pUmVkaXMiLCJmb2xkZXJSb290IjoiRjovbWluaVJlZGlzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wOFQyMDowOTo1MS4zMjVaIn1dLCJmZWVkYmFja1N0YXRlcyI6eyJ0ZW1wLWZlLTk4NWUxYjI1LTIyOWYtNDNmMC1iYmI1LTlkZDMyNzgwYWYxZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMjQwMGY4ZTAtY2ZiNS00NzllLWJiNGUtOTYxZDlhMmE1YzhlIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yMjlmZjY1YS04MGRlLTQ4ODItOWQ3YS1mNTQ2NTE4NmI5NTUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWI3ZjY5NTUwLTk1YzEtNDI5NC05NzA4LTE0ZmY0NzJkZjE5OCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn19LCJ0b29sVXNlU3RhdGVzIjp7IjJjY2E4ZWNjLTVhNzUtNDliYS05N2RhLTc1NTUzZTA1NjhiNjt0b29sdV92cnR4XzAxRHd3MjVYa011R2JobXMzUXlyYUVUViI6eyJyZXF1ZXN0SWQiOiIyY2NhOGVjYy01YTc1LTQ5YmEtOTdkYS03NTU1M2UwNTY4YjYiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxRHd3MjVYa011R2JobXMzUXlyYUVUViIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyO1xuXG5pbXBvcnQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWw7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5pdGlhbGl6ZXI7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsUGlwZWxpbmU7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLm5pby5OaW9FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5Tb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0Lm5pby5OaW9TZXJ2ZXJTb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0RlY29kZXI7XG5pbXBvcnQgaW8ubmV0dHkuaGFuZGxlci5jb2RlYy5zdHJpbmcuU3RyaW5nRW5jb2RlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLmhhbmRsZXIuU3RyaW5nSGFuZGxlcjtcblxucHVibGljIGNsYXNzIG1pbmlSZWRpc1NlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xuXG4gICAgcHJpdmF0ZSBTdHJpbmcgaG9zdDtcbiAgICBwcml2YXRlIGludCBwb3J0O1xuXG4gICAgcHJpdmF0ZSBDaGFubmVsIHNlcnZlckNoYW5uZWw7XG5cbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIGJvc3NHcm91cDtcbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIHdvcmtlckdyb3VwO1xuXG4gICAgcHVibGljIG1pbmlSZWRpc1NlcnZlcihTdHJpbmcgaG9zdCwgaW50IHBvcnQpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5ib3NzR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoMSk7XG4gICAgICAgIHRoaXMud29ya2VyR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoNCk7XG4gICAgfVxuXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBzdGFydCgpIHtcbiAgICAgICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcblxuICAgICAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcbiAgICAgICAgICAgICAgICAuY2hhbm5lbChOaW9TZXJ2ZXJTb2NrZXRDaGFubmVsLmNsYXNzKVxuICAgICAgICAgICAgICAgIC5jaGlsZEhhbmRsZXIobmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcbiAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGluaXRDaGFubmVsKFNvY2tldENoYW5uZWwgY2gpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdIYW5kbGVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRW5jb2RlcigpKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBzZXJ2ZXJDaGFubmVsID0gc2VydmVyQm9vdHN0cmFwLmJpbmQoaG9zdCwgcG9ydCkuc3luYygpLmNoYW5uZWwoKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIlJlZGlzIHNlcnZlciBzdGFydGVkIGF0IFwiICsgaG9zdCArIFwiOlwiICsgcG9ydCk7XG4gICAgICAgIH1jYXRjaChJbnRlcnJ1cHRlZEV4Y2VwdGlvbiBlKXtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgc3RvcCgpIHtcbiAgICAgICAgYm9zc0dyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xuICAgICAgICB3b3JrZXJHcm91cC5zaHV0ZG93bkdyYWNlZnVsbHkoKTtcbiAgICAgICAgc2VydmVyQ2hhbm5lbC5jbG9zZSgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL1JlZGlzTWluaVNlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXI7XG5cbnB1YmxpYyBjbGFzcyBSZWRpc01pbmlTZXJ2ZXIge1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9sYXVuY2hlci9SZWRpc1NlcnZlckxhdW5jaGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LmxhdW5jaGVyO1xuXG5pbXBvcnQgc2l0ZS5obmZ5MjU4LnNlcnZlci5SZWRpc1NlcnZlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLm1pbmlSZWRpc1NlcnZlcjtcblxucHVibGljIGNsYXNzIFJlZGlzU2VydmVyTGF1bmNoZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiAgICAgICAgUmVkaXNTZXJ2ZXIgcmVkaXNTZXJ2ZXIgPSBuZXcgbWluaVJlZGlzU2VydmVyKFwibG9jYWxob3N0XCIsIDYzNzkpO1xuICAgICAgICByZWRpc1NlcnZlci5zdGFydCgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL1JlZGlzU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5LnNlcnZlcjtcblxucHVibGljIGludGVyZmFjZSBSZWRpc1NlcnZlciB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9SZWRpc1NlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5zZXJ2ZXI7XG5cbnB1YmxpYyBpbnRlcmZhY2UgUmVkaXNTZXJ2ZXJ7XG4gICAgdm9pZCBzdGFydCgpO1xuICAgIHZvaWQgc3RvcCgpO1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvaGFuZGxlci9TdHJpbmdIYW5kbGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlci5oYW5kbGVyO1xuXG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSGFuZGxlckNvbnRleHQ7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5ib3VuZEhhbmRsZXJBZGFwdGVyO1xuaW1wb3J0IHNpdGUuaG5meTI1OC5yZXNwLlNpbXBsZVN0cmluZztcblxucHVibGljIGNsYXNzIFN0cmluZ0hhbmRsZXIgZXh0ZW5kcyBDaGFubmVsSW5ib3VuZEhhbmRsZXJBZGFwdGVyIHtcbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBjaGFubmVsUmVhZChDaGFubmVsSGFuZGxlckNvbnRleHQgY3R4LCBPYmplY3QgbXNnKSB0aHJvd3MgRXhjZXB0aW9ue1xuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCLmjqXmlLbliLByZWRpc+a2iOaBrzogXCIgKyBtc2cpO1xuXG4gICAgICAgIGN0eC5jaGFubmVsKCkud3JpdGVBbmRGbHVzaChTaW1wbGVTdHJpbmcuT0sudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgY2hhbm5lbEFjdGl2ZShDaGFubmVsSGFuZGxlckNvbnRleHQgY3R4KXtcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwi5a6i5oi356uv6L+e5o6l5oiQ5YqfXCIpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIGV4Y2VwdGlvbkNhdWdodChDaGFubmVsSGFuZGxlckNvbnRleHQgY3R4LCBUaHJvd2FibGUgY2F1c2UpIHRocm93cyBFeGNlcHRpb257XG4gICAgICAgIGNhdXNlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICBjdHguY2xvc2UoKTtcbiAgICB9XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvU2ltcGxlU3RyaW5nLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbmltcG9ydCBpby5uZXR0eS5idWZmZXIuQnl0ZUJ1ZjtcbmltcG9ydCBsb21ib2suR2V0dGVyO1xuaW1wb3J0IGxvbWJvay5TZXR0ZXI7XG5cbkBHZXR0ZXJcbkBTZXR0ZXJcbnB1YmxpYyBjbGFzcyBTaW1wbGVTdHJpbmcgZXh0ZW5kcyBSZXNwe1xuICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU2ltcGxlU3RyaW5nIE9LID0gbmV3IFNpbXBsZVN0cmluZyhcIk9LXCIpO1xuICAgIHByaXZhdGUgZmluYWwgU3RyaW5nIHZhbHVlO1xuXG4gICAgcHVibGljIFNpbXBsZVN0cmluZyhTdHJpbmcgdmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB2b2lkIGVuY29kZShSZXNwIHJlc3AsIEJ5dGVCdWYgYnl0ZUJ1Zil7XG4gICAgICAgIGJ5dGVCdWYud3JpdGVCeXRlcyhuZXcgYnl0ZVsnKyddKTtcbiAgICAgICAgYnl0ZUJ1Zi53cml0ZUJ5dGVzKHZhbHVlLmdldEJ5dGVzKCkpO1xuICAgICAgICBieXRlQnVmLndyaXRlQnl0ZXMoQ1JMRik7XG4gICAgfVxufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1Jlc3AuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxuaW1wb3J0IGlvLm5ldHR5LmJ1ZmZlci5CeXRlQnVmO1xuXG5wdWJsaWMgYWJzdHJhY3QgY2xhc3MgUmVzcCB7XG4gICAgcHVibGljIHN0YXRpYyBmaW5hbCBieXRlW10gQ1JMRiA9IHsnXFxyJywgJ1xcbid9O1xuXG4vLyAgICBwdWJsaWMgYWJzdHJhY3Qgdm9pZCBlbmNvZGUoUmVzcCByZXNwLCBCeXRlQnVmIGJ5dGVCdWYpO1xuXG4gICAgcHVibGljIFN0cmluZyB0b1N0cmluZygpe1xuICAgICAgICByZXR1cm4gXCIrT0tcXHJcXG5cIjtcbiAgICB9XG5cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL2hhbmRsZXIvU3RyaW5nSGFuZGxlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXIuaGFuZGxlcjtcblxucHVibGljIGNsYXNzIFN0cmluZ0hhbmRsZXIge1xufVxuLi4uXG5QYXRoOiBwb20ueG1sXG48P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cbjxwcm9qZWN0IHhtbG5zPVwiaHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4wXCJcbiAgICAgICAgIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCJcbiAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj1cImh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMCBodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy94c2QvbWF2ZW4tNC4wLjAueHNkXCI+XG4gICAgPG1vZGVsVmVyc2lvbj40LjAuMDwvbW9kZWxWZXJzaW9uPlxuXG4gICAgPGdyb3VwSWQ+c2l0ZS5obmZ5MjU4PC9ncm91cElkPlxuICAgIDxhcnRpZmFjdElkPm1pbmlSZWRpczwvYXJ0aWZhY3RJZD5cbiAgICA8dmVyc2lvbj4xLjAtU05BUFNIT1Q8L3ZlcnNpb24+XG5cbiAgICA8cHJvcGVydGllcz5cbiAgICAgICAgPG1hdmVuLmNvbXBpbGVyLnNvdXJjZT44PC9tYXZlbi5jb21waWxlci5zb3VyY2U+XG4gICAgICAgIDxtYXZlbi5jb21waWxlci50YXJnZXQ+ODwvbWF2ZW4uY29tcGlsZXIudGFyZ2V0PlxuICAgICAgICA8cHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5VVEYtODwvcHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5cbiAgICA8L3Byb3BlcnRpZXM+XG5cbiAgICA8ZGVwZW5kZW5jaWVzPlxuPCEtLSAgICAgICAgbmV0dHnnu4Tku7YtLT5cbiAgICAgICAgPGRlcGVuZGVuY3k+XG4gICAgICAgICAgICA8Z3JvdXBJZD5pby5uZXR0eTwvZ3JvdXBJZD5cbiAgICAgICAgICAgIDxhcnRpZmFjdElkPm5ldHR5LWFsbDwvYXJ0aWZhY3RJZD5cbiAgICAgICAgICAgIDx2ZXJzaW9uPjQuMS41MS5GaW5hbDwvdmVyc2lvbj5cbiAgICAgICAgPC9kZXBlbmRlbmN5PlxuXG48IS0tICAgICAgICBsb21ib2stLT5cblxuICAgICAgICA8ZGVwZW5kZW5jeT5cbiAgICAgICAgICAgIDxncm91cElkPm9yZy5wcm9qZWN0bG9tYm9rPC9ncm91cElkPlxuICAgICAgICAgICAgPGFydGlmYWN0SWQ+bG9tYm9rPC9hcnRpZmFjdElkPlxuICAgICAgICAgICAgPHZlcnNpb24+MS4xOC4yMDwvdmVyc2lvbj5cbiAgICAgICAgPC9kZXBlbmRlbmN5PlxuICAgIDwvZGVwZW5kZW5jaWVzPlxuXG5cblxuXG48L3Byb2plY3Q+Li4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1Jlc3BJbnRlZ2VyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbnB1YmxpYyBjbGFzcyBSZXNwSW50ZWdlciBleHRlbmRzIFJlc3Age1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meS9sYXVuY2hlci9TZXJ2ZXJMYXVuY2hlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5sYXVuY2hlcjtcblxucHVibGljIGNsYXNzIFNlcnZlckxhdW5jaGVyIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvcmVzcC9FcnJvcnMuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxucHVibGljIGNsYXNzIEVycm9ycyBleHRlbmRzIFJlc3B7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvUmVzcEFycmF5LmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbnB1YmxpYyBjbGFzcyBSZXNwQXJyYXkgZXh0ZW5kcyBSZXNwe1xufVxuLi4uXG5QYXRoOiAuZ2l0aWdub3JlXG50YXJnZXQvXG4hLm12bi93cmFwcGVyL21hdmVuLXdyYXBwZXIuamFyXG4hKiovc3JjL21haW4vKiovdGFyZ2V0L1xuISoqL3NyYy90ZXN0LyoqL3RhcmdldC9cblxuIyMjIEludGVsbGlKIElERUEgIyMjXG4uaWRlYS9tb2R1bGVzLnhtbFxuLmlkZWEvamFyUmVwb3NpdG9yaWVzLnhtbFxuLmlkZWEvY29tcGlsZXIueG1sXG4uaWRlYS9saWJyYXJpZXMvXG4qLml3c1xuKi5pbWxcbiouaXByXG5cbiMjIyBFY2xpcHNlICMjI1xuLmFwdF9nZW5lcmF0ZWRcbi5jbGFzc3BhdGhcbi5mYWN0b3J5cGF0aFxuLnByb2plY3Rcbi5zZXR0aW5nc1xuLnNwcmluZ0JlYW5zXG4uc3RzNC1jYWNoZVxuXG4jIyMgTmV0QmVhbnMgIyMjXG4vbmJwcm9qZWN0L3ByaXZhdGUvXG4vbmJidWlsZC9cbi9kaXN0L1xuL25iZGlzdC9cbi8ubmItZ3JhZGxlL1xuYnVpbGQvXG4hKiovc3JjL21haW4vKiovYnVpbGQvXG4hKiovc3JjL3Rlc3QvKiovYnVpbGQvXG5cbiMjIyBWUyBDb2RlICMjI1xuLnZzY29kZS9cblxuIyMjIE1hYyBPUyAjIyNcbi5EU19TdG9yZS4uLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYWY5MjM1NjYtNzdmNy00MTM4LWJiZGUtOWQ2MzJlOTc3N2MwO3Rvb2x1X3ZydHhfMDE0a2hwbUFBdkhFNTZSZWhBRUQ5SjZ0Ijp7InJlcXVlc3RJZCI6ImFmOTIzNTY2LTc3ZjctNDEzOC1iYmRlLTlkNjMyZTk3NzdjMCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDE0a2hwbUFBdkhFNTZSZWhBRUQ5SjZ0IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL2hhbmRsZXIvU3RyaW5nSGFuZGxlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5zZXJ2ZXIuaGFuZGxlcjtcblxuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEhhbmRsZXJDb250ZXh0O1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEluYm91bmRIYW5kbGVyQWRhcHRlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTgucmVzcC5TaW1wbGVTdHJpbmc7XG5cbnB1YmxpYyBjbGFzcyBTdHJpbmdIYW5kbGVyIGV4dGVuZHMgQ2hhbm5lbEluYm91bmRIYW5kbGVyQWRhcHRlciB7XG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgY2hhbm5lbFJlYWQoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCwgT2JqZWN0IG1zZykgdGhyb3dzIEV4Y2VwdGlvbntcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwi5o6l5pS25YiwcmVkaXPmtojmga86IFwiICsgbXNnKTtcblxuICAgICAgICBjdHguY2hhbm5lbCgpLndyaXRlQW5kRmx1c2goU2ltcGxlU3RyaW5nLk9LLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIGNoYW5uZWxBY3RpdmUoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCl7XG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIuWuouaIt+err+i/nuaOpeaIkOWKn1wiKTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBleGNlcHRpb25DYXVnaHQoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCwgVGhyb3dhYmxlIGNhdXNlKSB0aHJvd3MgRXhjZXB0aW9ue1xuICAgICAgICBjYXVzZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgY3R4LmNsb3NlKCk7XG4gICAgfVxufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meS9zZXJ2ZXIvaGFuZGxlci9TdHJpbmdIYW5kbGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5LnNlcnZlci5oYW5kbGVyO1xuXG5wdWJsaWMgY2xhc3MgU3RyaW5nSGFuZGxlciB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyO1xuXG5pbXBvcnQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWw7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5pdGlhbGl6ZXI7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsUGlwZWxpbmU7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLm5pby5OaW9FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5Tb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0Lm5pby5OaW9TZXJ2ZXJTb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0RlY29kZXI7XG5pbXBvcnQgaW8ubmV0dHkuaGFuZGxlci5jb2RlYy5zdHJpbmcuU3RyaW5nRW5jb2RlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLmhhbmRsZXIuU3RyaW5nSGFuZGxlcjtcblxucHVibGljIGNsYXNzIG1pbmlSZWRpc1NlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xuXG4gICAgcHJpdmF0ZSBTdHJpbmcgaG9zdDtcbiAgICBwcml2YXRlIGludCBwb3J0O1xuXG4gICAgcHJpdmF0ZSBDaGFubmVsIHNlcnZlckNoYW5uZWw7XG5cbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIGJvc3NHcm91cDtcbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIHdvcmtlckdyb3VwO1xuXG4gICAgcHVibGljIG1pbmlSZWRpc1NlcnZlcihTdHJpbmcgaG9zdCwgaW50IHBvcnQpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5ib3NzR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoMSk7XG4gICAgICAgIHRoaXMud29ya2VyR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoNCk7XG4gICAgfVxuXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBzdGFydCgpIHtcbiAgICAgICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcblxuICAgICAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcbiAgICAgICAgICAgICAgICAuY2hhbm5lbChOaW9TZXJ2ZXJTb2NrZXRDaGFubmVsLmNsYXNzKVxuICAgICAgICAgICAgICAgIC5jaGlsZEhhbmRsZXIobmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcbiAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGluaXRDaGFubmVsKFNvY2tldENoYW5uZWwgY2gpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdIYW5kbGVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRW5jb2RlcigpKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBzZXJ2ZXJDaGFubmVsID0gc2VydmVyQm9vdHN0cmFwLmJpbmQoaG9zdCwgcG9ydCkuc3luYygpLmNoYW5uZWwoKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIlJlZGlzIHNlcnZlciBzdGFydGVkIGF0IFwiICsgaG9zdCArIFwiOlwiICsgcG9ydCk7XG4gICAgICAgIH1jYXRjaChJbnRlcnJ1cHRlZEV4Y2VwdGlvbiBlKXtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgc3RvcCgpIHtcbiAgICAgICAgYm9zc0dyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xuICAgICAgICB3b3JrZXJHcm91cC5zaHV0ZG93bkdyYWNlZnVsbHkoKTtcbiAgICAgICAgc2VydmVyQ2hhbm5lbC5jbG9zZSgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvcmVzcC9TaW1wbGVTdHJpbmcuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxuaW1wb3J0IGlvLm5ldHR5LmJ1ZmZlci5CeXRlQnVmO1xuaW1wb3J0IGxvbWJvay5HZXR0ZXI7XG5pbXBvcnQgbG9tYm9rLlNldHRlcjtcblxuQEdldHRlclxuQFNldHRlclxucHVibGljIGNsYXNzIFNpbXBsZVN0cmluZyBleHRlbmRzIFJlc3B7XG4gICAgcHVibGljIHN0YXRpYyBmaW5hbCBTaW1wbGVTdHJpbmcgT0sgPSBuZXcgU2ltcGxlU3RyaW5nKFwiT0tcIik7XG4gICAgcHJpdmF0ZSBmaW5hbCBTdHJpbmcgdmFsdWU7XG5cbiAgICBwdWJsaWMgU2ltcGxlU3RyaW5nKFN0cmluZyB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHZvaWQgZW5jb2RlKFJlc3AgcmVzcCwgQnl0ZUJ1ZiBieXRlQnVmKXtcbiAgICAgICAgYnl0ZUJ1Zi53cml0ZUJ5dGVzKG5ldyBieXRlWycrJ10pO1xuICAgICAgICBieXRlQnVmLndyaXRlQnl0ZXModmFsdWUuZ2V0Qnl0ZXMoKSk7XG4gICAgICAgIGJ5dGVCdWYud3JpdGVCeXRlcyhDUkxGKTtcbiAgICB9XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5L3NlcnZlci9SZWRpc1NlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXI7XG5cbnB1YmxpYyBpbnRlcmZhY2UgUmVkaXNTZXJ2ZXIge1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9zZXJ2ZXIvUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyO1xuXG5wdWJsaWMgaW50ZXJmYWNlIFJlZGlzU2VydmVye1xuICAgIHZvaWQgc3RhcnQoKTtcbiAgICB2b2lkIHN0b3AoKTtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvcmVzcC9SZXNwLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbmltcG9ydCBpby5uZXR0eS5idWZmZXIuQnl0ZUJ1ZjtcblxucHVibGljIGFic3RyYWN0IGNsYXNzIFJlc3Age1xuICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgYnl0ZVtdIENSTEYgPSB7J1xccicsICdcXG4nfTtcblxuLy8gICAgcHVibGljIGFic3RyYWN0IHZvaWQgZW5jb2RlKFJlc3AgcmVzcCwgQnl0ZUJ1ZiBieXRlQnVmKTtcblxuICAgIHB1YmxpYyBTdHJpbmcgdG9TdHJpbmcoKXtcbiAgICAgICAgcmV0dXJuIFwiK09LXFxyXFxuXCI7XG4gICAgfVxuXG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5L3NlcnZlci9SZWRpc01pbmlTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkuc2VydmVyO1xuXG5wdWJsaWMgY2xhc3MgUmVkaXNNaW5pU2VydmVyIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvbGF1bmNoZXIvUmVkaXNTZXJ2ZXJMYXVuY2hlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5sYXVuY2hlcjtcblxuaW1wb3J0IHNpdGUuaG5meTI1OC5zZXJ2ZXIuUmVkaXNTZXJ2ZXI7XG5pbXBvcnQgc2l0ZS5obmZ5MjU4LnNlcnZlci5taW5pUmVkaXNTZXJ2ZXI7XG5cbnB1YmxpYyBjbGFzcyBSZWRpc1NlcnZlckxhdW5jaGVyIHtcbiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4gICAgICAgIFJlZGlzU2VydmVyIHJlZGlzU2VydmVyID0gbmV3IG1pbmlSZWRpc1NlcnZlcihcImxvY2FsaG9zdFwiLCA2Mzc5KTtcbiAgICAgICAgcmVkaXNTZXJ2ZXIuc3RhcnQoKTtcbiAgICB9XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvUmVzcEludGVnZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxucHVibGljIGNsYXNzIFJlc3BJbnRlZ2VyIGV4dGVuZHMgUmVzcCB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvUmVzcEFycmF5LmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbnB1YmxpYyBjbGFzcyBSZXNwQXJyYXkgZXh0ZW5kcyBSZXNwe1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL0Vycm9ycy5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5yZXNwO1xuXG5wdWJsaWMgY2xhc3MgRXJyb3JzIGV4dGVuZHMgUmVzcHtcbn1cbi4uLlxuUGF0aDogcG9tLnhtbFxuPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+XG48cHJvamVjdCB4bWxucz1cImh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMFwiXG4gICAgICAgICB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZVwiXG4gICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249XCJodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy9QT00vNC4wLjAgaHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZFwiPlxuICAgIDxtb2RlbFZlcnNpb24+NC4wLjA8L21vZGVsVmVyc2lvbj5cblxuICAgIDxncm91cElkPnNpdGUuaG5meTI1ODwvZ3JvdXBJZD5cbiAgICA8YXJ0aWZhY3RJZD5taW5pUmVkaXM8L2FydGlmYWN0SWQ+XG4gICAgPHZlcnNpb24+MS4wLVNOQVBTSE9UPC92ZXJzaW9uPlxuXG4gICAgPHByb3BlcnRpZXM+XG4gICAgICAgIDxtYXZlbi5jb21waWxlci5zb3VyY2U+ODwvbWF2ZW4uY29tcGlsZXIuc291cmNlPlxuICAgICAgICA8bWF2ZW4uY29tcGlsZXIudGFyZ2V0Pjg8L21hdmVuLmNvbXBpbGVyLnRhcmdldD5cbiAgICAgICAgPHByb2plY3QuYnVpbGQuc291cmNlRW5jb2Rpbmc+VVRGLTg8L3Byb2plY3QuYnVpbGQuc291cmNlRW5jb2Rpbmc+XG4gICAgPC9wcm9wZXJ0aWVzPlxuXG4gICAgPGRlcGVuZGVuY2llcz5cbjwhLS0gICAgICAgIG5ldHR557uE5Lu2LS0+XG4gICAgICAgIDxkZXBlbmRlbmN5PlxuICAgICAgICAgICAgPGdyb3VwSWQ+aW8ubmV0dHk8L2dyb3VwSWQ+XG4gICAgICAgICAgICA8YXJ0aWZhY3RJZD5uZXR0eS1hbGw8L2FydGlmYWN0SWQ+XG4gICAgICAgICAgICA8dmVyc2lvbj40LjEuNTEuRmluYWw8L3ZlcnNpb24+XG4gICAgICAgIDwvZGVwZW5kZW5jeT5cblxuPCEtLSAgICAgICAgbG9tYm9rLS0+XG5cbiAgICAgICAgPGRlcGVuZGVuY3k+XG4gICAgICAgICAgICA8Z3JvdXBJZD5vcmcucHJvamVjdGxvbWJvazwvZ3JvdXBJZD5cbiAgICAgICAgICAgIDxhcnRpZmFjdElkPmxvbWJvazwvYXJ0aWZhY3RJZD5cbiAgICAgICAgICAgIDx2ZXJzaW9uPjEuMTguMjA8L3ZlcnNpb24+XG4gICAgICAgIDwvZGVwZW5kZW5jeT5cbiAgICA8L2RlcGVuZGVuY2llcz5cblxuXG5cblxuPC9wcm9qZWN0Pi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvbGF1bmNoZXIvU2VydmVyTGF1bmNoZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkubGF1bmNoZXI7XG5cbnB1YmxpYyBjbGFzcyBTZXJ2ZXJMYXVuY2hlciB7XG59XG4uLi5cblBhdGg6IC5naXRpZ25vcmVcbnRhcmdldC9cbiEubXZuL3dyYXBwZXIvbWF2ZW4td3JhcHBlci5qYXJcbiEqKi9zcmMvbWFpbi8qKi90YXJnZXQvXG4hKiovc3JjL3Rlc3QvKiovdGFyZ2V0L1xuXG4jIyMgSW50ZWxsaUogSURFQSAjIyNcbi5pZGVhL21vZHVsZXMueG1sXG4uaWRlYS9qYXJSZXBvc2l0b3JpZXMueG1sXG4uaWRlYS9jb21waWxlci54bWxcbi5pZGVhL2xpYnJhcmllcy9cbiouaXdzXG4qLmltbFxuKi5pcHJcblxuIyMjIEVjbGlwc2UgIyMjXG4uYXB0X2dlbmVyYXRlZFxuLmNsYXNzcGF0aFxuLmZhY3RvcnlwYXRoXG4ucHJvamVjdFxuLnNldHRpbmdzXG4uc3ByaW5nQmVhbnNcbi5zdHM0LWNhY2hlXG5cbiMjIyBOZXRCZWFucyAjIyNcbi9uYnByb2plY3QvcHJpdmF0ZS9cbi9uYmJ1aWxkL1xuL2Rpc3QvXG4vbmJkaXN0L1xuLy5uYi1ncmFkbGUvXG5idWlsZC9cbiEqKi9zcmMvbWFpbi8qKi9idWlsZC9cbiEqKi9zcmMvdGVzdC8qKi9idWlsZC9cblxuIyMjIFZTIENvZGUgIyMjXG4udnNjb2RlL1xuXG4jIyMgTWFjIE9TICMjI1xuLkRTX1N0b3JlLi4uXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIzMTYyYmEwYy03MzBkLTRlMjEtYjdlNi00MmE0OWZlYTI1YTM7dG9vbHVfdnJ0eF8wMTZlaVJrUVgyekczVmp3TjdKOE10TlkiOnsicmVxdWVzdElkIjoiMzE2MmJhMGMtNzMwZC00ZTIxLWI3ZTYtNDJhNDlmZWEyNWEzIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMTZlaVJrUVgyekczVmp3TjdKOE10TlkiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meS9zZXJ2ZXIvUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkuc2VydmVyO1xuXG5wdWJsaWMgaW50ZXJmYWNlIFJlZGlzU2VydmVyIHtcbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL1JlZGlzU2VydmVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnNlcnZlcjtcblxucHVibGljIGludGVyZmFjZSBSZWRpc1NlcnZlcntcbiAgICB2b2lkIHN0YXJ0KCk7XG4gICAgdm9pZCBzdG9wKCk7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3NlcnZlci9taW5pUmVkaXNTZXJ2ZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTguc2VydmVyO1xuXG5pbXBvcnQgaW8ubmV0dHkuYm9vdHN0cmFwLlNlcnZlckJvb3RzdHJhcDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLkNoYW5uZWw7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsSW5pdGlhbGl6ZXI7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5DaGFubmVsUGlwZWxpbmU7XG5pbXBvcnQgaW8ubmV0dHkuY2hhbm5lbC5FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLm5pby5OaW9FdmVudExvb3BHcm91cDtcbmltcG9ydCBpby5uZXR0eS5jaGFubmVsLnNvY2tldC5Tb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuc29ja2V0Lm5pby5OaW9TZXJ2ZXJTb2NrZXRDaGFubmVsO1xuaW1wb3J0IGlvLm5ldHR5LmhhbmRsZXIuY29kZWMuc3RyaW5nLlN0cmluZ0RlY29kZXI7XG5pbXBvcnQgaW8ubmV0dHkuaGFuZGxlci5jb2RlYy5zdHJpbmcuU3RyaW5nRW5jb2RlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLmhhbmRsZXIuU3RyaW5nSGFuZGxlcjtcblxucHVibGljIGNsYXNzIG1pbmlSZWRpc1NlcnZlciBpbXBsZW1lbnRzIFJlZGlzU2VydmVye1xuXG4gICAgcHJpdmF0ZSBTdHJpbmcgaG9zdDtcbiAgICBwcml2YXRlIGludCBwb3J0O1xuXG4gICAgcHJpdmF0ZSBDaGFubmVsIHNlcnZlckNoYW5uZWw7XG5cbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIGJvc3NHcm91cDtcbiAgICBwcml2YXRlIEV2ZW50TG9vcEdyb3VwIHdvcmtlckdyb3VwO1xuXG4gICAgcHVibGljIG1pbmlSZWRpc1NlcnZlcihTdHJpbmcgaG9zdCwgaW50IHBvcnQpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5ib3NzR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoMSk7XG4gICAgICAgIHRoaXMud29ya2VyR3JvdXAgPSBuZXcgTmlvRXZlbnRMb29wR3JvdXAoNCk7XG4gICAgfVxuXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBzdGFydCgpIHtcbiAgICAgICAgU2VydmVyQm9vdHN0cmFwIHNlcnZlckJvb3RzdHJhcCA9IG5ldyBTZXJ2ZXJCb290c3RyYXAoKTtcblxuICAgICAgICBzZXJ2ZXJCb290c3RyYXAuZ3JvdXAoYm9zc0dyb3VwLCB3b3JrZXJHcm91cClcbiAgICAgICAgICAgICAgICAuY2hhbm5lbChOaW9TZXJ2ZXJTb2NrZXRDaGFubmVsLmNsYXNzKVxuICAgICAgICAgICAgICAgIC5jaGlsZEhhbmRsZXIobmV3IENoYW5uZWxJbml0aWFsaXplcjxTb2NrZXRDaGFubmVsPigpIHtcbiAgICAgICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGluaXRDaGFubmVsKFNvY2tldENoYW5uZWwgY2gpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbFBpcGVsaW5lIHBpcGVsaW5lID0gY2gucGlwZWxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmFkZExhc3QobmV3IFN0cmluZ0RlY29kZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRMYXN0KG5ldyBTdHJpbmdIYW5kbGVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUuYWRkTGFzdChuZXcgU3RyaW5nRW5jb2RlcigpKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBzZXJ2ZXJDaGFubmVsID0gc2VydmVyQm9vdHN0cmFwLmJpbmQoaG9zdCwgcG9ydCkuc3luYygpLmNoYW5uZWwoKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIlJlZGlzIHNlcnZlciBzdGFydGVkIGF0IFwiICsgaG9zdCArIFwiOlwiICsgcG9ydCk7XG4gICAgICAgIH1jYXRjaChJbnRlcnJ1cHRlZEV4Y2VwdGlvbiBlKXtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgc3RvcCgpIHtcbiAgICAgICAgYm9zc0dyb3VwLnNodXRkb3duR3JhY2VmdWxseSgpO1xuICAgICAgICB3b3JrZXJHcm91cC5zaHV0ZG93bkdyYWNlZnVsbHkoKTtcbiAgICAgICAgc2VydmVyQ2hhbm5lbC5jbG9zZSgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvc2VydmVyL2hhbmRsZXIvU3RyaW5nSGFuZGxlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5zZXJ2ZXIuaGFuZGxlcjtcblxuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEhhbmRsZXJDb250ZXh0O1xuaW1wb3J0IGlvLm5ldHR5LmNoYW5uZWwuQ2hhbm5lbEluYm91bmRIYW5kbGVyQWRhcHRlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTgucmVzcC5TaW1wbGVTdHJpbmc7XG5cbnB1YmxpYyBjbGFzcyBTdHJpbmdIYW5kbGVyIGV4dGVuZHMgQ2hhbm5lbEluYm91bmRIYW5kbGVyQWRhcHRlciB7XG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIHZvaWQgY2hhbm5lbFJlYWQoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCwgT2JqZWN0IG1zZykgdGhyb3dzIEV4Y2VwdGlvbntcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwi5o6l5pS25YiwcmVkaXPmtojmga86IFwiICsgbXNnKTtcblxuICAgICAgICBjdHguY2hhbm5lbCgpLndyaXRlQW5kRmx1c2goU2ltcGxlU3RyaW5nLk9LLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyB2b2lkIGNoYW5uZWxBY3RpdmUoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCl7XG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIuWuouaIt+err+i/nuaOpeaIkOWKn1wiKTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgdm9pZCBleGNlcHRpb25DYXVnaHQoQ2hhbm5lbEhhbmRsZXJDb250ZXh0IGN0eCwgVGhyb3dhYmxlIGNhdXNlKSB0aHJvd3MgRXhjZXB0aW9ue1xuICAgICAgICBjYXVzZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgY3R4LmNsb3NlKCk7XG4gICAgfVxufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9sYXVuY2hlci9SZWRpc1NlcnZlckxhdW5jaGVyLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LmxhdW5jaGVyO1xuXG5pbXBvcnQgc2l0ZS5obmZ5MjU4LnNlcnZlci5SZWRpc1NlcnZlcjtcbmltcG9ydCBzaXRlLmhuZnkyNTguc2VydmVyLm1pbmlSZWRpc1NlcnZlcjtcblxucHVibGljIGNsYXNzIFJlZGlzU2VydmVyTGF1bmNoZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiAgICAgICAgUmVkaXNTZXJ2ZXIgcmVkaXNTZXJ2ZXIgPSBuZXcgbWluaVJlZGlzU2VydmVyKFwibG9jYWxob3N0XCIsIDYzNzkpO1xuICAgICAgICByZWRpc1NlcnZlci5zdGFydCgpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvc2VydmVyL1JlZGlzTWluaVNlcnZlci5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meS5zZXJ2ZXI7XG5cbnB1YmxpYyBjbGFzcyBSZWRpc01pbmlTZXJ2ZXIge1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1NpbXBsZVN0cmluZy5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5yZXNwO1xuXG5pbXBvcnQgaW8ubmV0dHkuYnVmZmVyLkJ5dGVCdWY7XG5pbXBvcnQgbG9tYm9rLkdldHRlcjtcbmltcG9ydCBsb21ib2suU2V0dGVyO1xuXG5AR2V0dGVyXG5AU2V0dGVyXG5wdWJsaWMgY2xhc3MgU2ltcGxlU3RyaW5nIGV4dGVuZHMgUmVzcHtcbiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFNpbXBsZVN0cmluZyBPSyA9IG5ldyBTaW1wbGVTdHJpbmcoXCJPS1wiKTtcbiAgICBwcml2YXRlIGZpbmFsIFN0cmluZyB2YWx1ZTtcblxuICAgIHB1YmxpYyBTaW1wbGVTdHJpbmcoU3RyaW5nIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdm9pZCBlbmNvZGUoUmVzcCByZXNwLCBCeXRlQnVmIGJ5dGVCdWYpe1xuICAgICAgICBieXRlQnVmLndyaXRlQnl0ZXMobmV3IGJ5dGVbJysnXSk7XG4gICAgICAgIGJ5dGVCdWYud3JpdGVCeXRlcyh2YWx1ZS5nZXRCeXRlcygpKTtcbiAgICAgICAgYnl0ZUJ1Zi53cml0ZUJ5dGVzKENSTEYpO1xuICAgIH1cbn1cbi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkyNTgvcmVzcC9SZXNwLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbmltcG9ydCBpby5uZXR0eS5idWZmZXIuQnl0ZUJ1ZjtcblxucHVibGljIGFic3RyYWN0IGNsYXNzIFJlc3Age1xuICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgYnl0ZVtdIENSTEYgPSB7J1xccicsICdcXG4nfTtcblxuLy8gICAgcHVibGljIGFic3RyYWN0IHZvaWQgZW5jb2RlKFJlc3AgcmVzcCwgQnl0ZUJ1ZiBieXRlQnVmKTtcblxuICAgIHB1YmxpYyBTdHJpbmcgdG9TdHJpbmcoKXtcbiAgICAgICAgcmV0dXJuIFwiK09LXFxyXFxuXCI7XG4gICAgfVxuXG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5L3NlcnZlci9oYW5kbGVyL1N0cmluZ0hhbmRsZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkuc2VydmVyLmhhbmRsZXI7XG5cbnB1YmxpYyBjbGFzcyBTdHJpbmdIYW5kbGVyIHtcbn1cbi4uLlxuUGF0aDogcG9tLnhtbFxuPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+XG48cHJvamVjdCB4bWxucz1cImh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMFwiXG4gICAgICAgICB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZVwiXG4gICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249XCJodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy9QT00vNC4wLjAgaHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZFwiPlxuICAgIDxtb2RlbFZlcnNpb24+NC4wLjA8L21vZGVsVmVyc2lvbj5cblxuICAgIDxncm91cElkPnNpdGUuaG5meTI1ODwvZ3JvdXBJZD5cbiAgICA8YXJ0aWZhY3RJZD5taW5pUmVkaXM8L2FydGlmYWN0SWQ+XG4gICAgPHZlcnNpb24+MS4wLVNOQVBTSE9UPC92ZXJzaW9uPlxuXG4gICAgPHByb3BlcnRpZXM+XG4gICAgICAgIDxtYXZlbi5jb21waWxlci5zb3VyY2U+ODwvbWF2ZW4uY29tcGlsZXIuc291cmNlPlxuICAgICAgICA8bWF2ZW4uY29tcGlsZXIudGFyZ2V0Pjg8L21hdmVuLmNvbXBpbGVyLnRhcmdldD5cbiAgICAgICAgPHByb2plY3QuYnVpbGQuc291cmNlRW5jb2Rpbmc+VVRGLTg8L3Byb2plY3QuYnVpbGQuc291cmNlRW5jb2Rpbmc+XG4gICAgPC9wcm9wZXJ0aWVzPlxuXG4gICAgPGRlcGVuZGVuY2llcz5cbjwhLS0gICAgICAgIG5ldHR557uE5Lu2LS0+XG4gICAgICAgIDxkZXBlbmRlbmN5PlxuICAgICAgICAgICAgPGdyb3VwSWQ+aW8ubmV0dHk8L2dyb3VwSWQ+XG4gICAgICAgICAgICA8YXJ0aWZhY3RJZD5uZXR0eS1hbGw8L2FydGlmYWN0SWQ+XG4gICAgICAgICAgICA8dmVyc2lvbj40LjEuNTEuRmluYWw8L3ZlcnNpb24+XG4gICAgICAgIDwvZGVwZW5kZW5jeT5cblxuPCEtLSAgICAgICAgbG9tYm9rLS0+XG5cbiAgICAgICAgPGRlcGVuZGVuY3k+XG4gICAgICAgICAgICA8Z3JvdXBJZD5vcmcucHJvamVjdGxvbWJvazwvZ3JvdXBJZD5cbiAgICAgICAgICAgIDxhcnRpZmFjdElkPmxvbWJvazwvYXJ0aWZhY3RJZD5cbiAgICAgICAgICAgIDx2ZXJzaW9uPjEuMTguMjA8L3ZlcnNpb24+XG4gICAgICAgIDwvZGVwZW5kZW5jeT5cbiAgICA8L2RlcGVuZGVuY2llcz5cblxuXG5cblxuPC9wcm9qZWN0Pi4uLlxuUGF0aDogc3JjL21haW4vamF2YS9zaXRlL2huZnkvbGF1bmNoZXIvU2VydmVyTGF1bmNoZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkubGF1bmNoZXI7XG5cbnB1YmxpYyBjbGFzcyBTZXJ2ZXJMYXVuY2hlciB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvUmVzcEludGVnZXIuamF2YVxucGFja2FnZSBzaXRlLmhuZnkyNTgucmVzcDtcblxucHVibGljIGNsYXNzIFJlc3BJbnRlZ2VyIGV4dGVuZHMgUmVzcCB7XG59XG4uLi5cblBhdGg6IHNyYy9tYWluL2phdmEvc2l0ZS9obmZ5MjU4L3Jlc3AvRXJyb3JzLmphdmFcbnBhY2thZ2Ugc2l0ZS5obmZ5MjU4LnJlc3A7XG5cbnB1YmxpYyBjbGFzcyBFcnJvcnMgZXh0ZW5kcyBSZXNwe1xufVxuLi4uXG5QYXRoOiBzcmMvbWFpbi9qYXZhL3NpdGUvaG5meTI1OC9yZXNwL1Jlc3BBcnJheS5qYXZhXG5wYWNrYWdlIHNpdGUuaG5meTI1OC5yZXNwO1xuXG5wdWJsaWMgY2xhc3MgUmVzcEFycmF5IGV4dGVuZHMgUmVzcHtcbn1cbi4uLlxuUGF0aDogLmdpdGlnbm9yZVxudGFyZ2V0L1xuIS5tdm4vd3JhcHBlci9tYXZlbi13cmFwcGVyLmphclxuISoqL3NyYy9tYWluLyoqL3RhcmdldC9cbiEqKi9zcmMvdGVzdC8qKi90YXJnZXQvXG5cbiMjIyBJbnRlbGxpSiBJREVBICMjI1xuLmlkZWEvbW9kdWxlcy54bWxcbi5pZGVhL2phclJlcG9zaXRvcmllcy54bWxcbi5pZGVhL2NvbXBpbGVyLnhtbFxuLmlkZWEvbGlicmFyaWVzL1xuKi5pd3NcbiouaW1sXG4qLmlwclxuXG4jIyMgRWNsaXBzZSAjIyNcbi5hcHRfZ2VuZXJhdGVkXG4uY2xhc3NwYXRoXG4uZmFjdG9yeXBhdGhcbi5wcm9qZWN0XG4uc2V0dGluZ3Ncbi5zcHJpbmdCZWFuc1xuLnN0czQtY2FjaGVcblxuIyMjIE5ldEJlYW5zICMjI1xuL25icHJvamVjdC9wcml2YXRlL1xuL25iYnVpbGQvXG4vZGlzdC9cbi9uYmRpc3QvXG4vLm5iLWdyYWRsZS9cbmJ1aWxkL1xuISoqL3NyYy9tYWluLyoqL2J1aWxkL1xuISoqL3NyYy90ZXN0LyoqL2J1aWxkL1xuXG4jIyMgVlMgQ29kZSAjIyNcbi52c2NvZGUvXG5cbiMjIyBNYWMgT1MgIyMjXG4uRFNfU3RvcmUuLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX19LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6dHJ1ZSwiZXh0cmFEYXRhIjp7ImlzQWdlbnRDb252ZXJzYXRpb24iOnRydWUsImhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoibWFudWFsIiwiaXNBZ2VudEVkaXRzQ29sbGFwc2VkIjp0cnVlfQ==" />
      </map>
    </option>
  </component>
</project>